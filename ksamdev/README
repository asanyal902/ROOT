
   This repository contains the code to reproduce a la ROOT the I/O tests done by S. Khalatyan,
   University of Chicago.

   The directory structurres contains source code under 'src', 'macros' and 'packages'.
   Executables, both scripts or binaries, are located under 'bin'. 

   The basic classes making the events are in the PAR package packages/RTEvent.par; this is
   to facilitate its usage in PROOF.

   The 'macros' directory contains some utility macros to prepare and run the tests.

   0. Setting the environment and the rest

   Once checkout the code, make sure that ROOT is available (ROOTSYS and alike are defined).
   Then setup the local environment by executing

      $> source bin/setup.sh

   Then build the binary executables:

      $> make

   Now you are ready to start running the tests.

   1. Definition of the test sets

     This is are the sets, their number and tag

      #  tag              descrition                                                size

      1  data_20_c0_s99   no compression, 20 files, 100000 evts/file, splitted      ~2.8 GB
      2  data_200_c0_s99  no compression, 200 files, 10000 evts/file, splitted      ~2.8 GB
      3  data_20_c0_s0    no compression, 20 files, 100000 evts/file, unsplitted    ~3.5 GB
      4  data_200_c0_s0   no compression, 200 files, 10000 evts/file, unsplitted    ~3.5 GB
      5  data_20_c1_s99   compression, 20 files, 100000 evts/file, splitted         ~1.5 GB
      6  data_200_c1_s99  compression, 200 files, 10000 evts/file, splitted         ~1.5 GB
      7  data_20_c1_s0    compression, 20 files, 100000 evts/file, unsplitted       ~1.6 GB
      8  data_200_c1_s0   compression, 200 files, 10000 evts/file, unsplitted       ~1.6 GB


   2. Running the write tests 

   Locate a directory path where you can create the test files; the test needs about 20 GB
   of free space to create all sets. Each single set needs max 4 GB.
   In the following the directory path for the files is referred to as /data/iotest.

   Start root and load the package (the relevant macros and the package are already loaded;
   see rootlogon.C):

   $> root -l

   The macro for the write test is called WriteTests and accepts two arguments: the directory
   path and the test number (0 means all):

   root [] WriteTests("/data/iotest", 0)
WriteTest: 'data_20_c0_s99'   rt: 44.877 s ct: 38.420 s (3012968942 bytes, 64.02 MB/s)1 to go    
WriteTest: 'data_200_c0_s99'   rt: 41.589 s ct: 35.340 s (3028642568 bytes, 69.44 MB/s) 1 to go     
WriteTest: 'data_20_c0_s0'   rt: 62.366 s ct: 55.020 s (3717142402 bytes, 56.83 MB/s)1 to go    
WriteTest: 'data_200_c0_s0'   rt: 61.588 s ct: 53.850 s (3727247384 bytes, 57.71 MB/s) 1 to go     
WriteTest: 'data_20_c1_s99'   rt: 141.346 s ct: 137.480 s (1612933987 bytes, 10.88 MB/s)to go    
WriteTest: 'data_200_c1_s99'   rt: 126.097 s ct: 121.590 s (1633285269 bytes, 12.35 MB/s) to go     
WriteTest: 'data_20_c1_s0'   rt: 154.563 s ct: 150.390 s (1712767680 bytes, 10.57 MB/s)to go    
WriteTest: 'data_200_c1_s0'   rt: 136.832 s ct: 132.330 s (1724637810 bytes, 12.01 MB/s) to go

   The macro will run 8 tests. Each test is labelled with a string formatted as

            <test_tag> = data_<nf>_c<comp_level>_s<split_level>

   where
             <nf> is the number of files, either 20 or 200
             <comp_level> is the compression level, either 0 or 1
             <split_level> is the splitting level, either 1 or 99

   The macro also creates two directories:

        1. 'filelists' where it creates files '<test_tag>.txt' with the full paths
                       to the files created by the test; the information is in the
                       format which can be input to bin/releaseCache to clean the
                       file system cache for these files durign the reading tests
                       (see below).
        2. 'results' where it creates a file '<root_version>/writetest-<hostname>.txt' with the
                       results of the
                       test (which are also printed on the screen)


   3. Running the read tests in a simple ROOT session

      The macro for the read tests is called ReadTest.C and is loaded by rootlogon.C
      


   4. Running the read tests in PROOF-Lite


 


