Index: clang/include/clang/Lex/Lexer.h
===================================================================
--- clang/include/clang/Lex/Lexer.h	(revision 118054)
+++ clang/include/clang/Lex/Lexer.h	(working copy)
@@ -105,6 +105,9 @@
   /// lexer modifies features as a file is parsed!
   const LangOptions &getFeatures() const { return Features; }
 
+  /// Update the lexer's buffer end
+  void updateBufferEnd(const char *BufEnd);
+   
   /// getFileLoc - Return the File Location for the file we are lexing out of.
   /// The physical location encodes the location where the characters come from,
   /// the virtual location encodes where we should *claim* the characters came
Index: clang/lib/Lex/Lexer.cpp
===================================================================
--- clang/lib/Lex/Lexer.cpp	(revision 118054)
+++ clang/lib/Lex/Lexer.cpp	(working copy)
@@ -59,24 +59,28 @@
 // Lexer Class Implementation
 //===----------------------------------------------------------------------===//
 
-void Lexer::InitLexer(const char *BufStart, const char *BufPtr,
-                      const char *BufEnd) {
-  InitCharacterInfo();
 
-  BufferStart = BufStart;
-  BufferPtr = BufPtr;
+void Lexer::updateBufferEnd(const char *BufEnd) {
   BufferEnd = BufEnd;
-
+   
   assert(BufEnd[0] == 0 &&
          "We assume that the input buffer has a null character at the end"
          " to simplify lexing!");
+}
 
+void Lexer::InitLexer(const char *BufStart, const char *BufPtr,
+                      const char *BufEnd) {
+  InitCharacterInfo();
+  BufferStart = BufStart;
+  BufferPtr = BufPtr;
+  updateBufferEnd(BufEnd);
+  
+  // Start of the file is a start of line.
+  IsAtStartOfLine = true;
+   
   Is_PragmaLexer = false;
   IsInConflictMarker = false;
   
-  // Start of the file is a start of line.
-  IsAtStartOfLine = true;
-
   // We are not after parsing a #.
   ParsingPreprocessorDirective = false;
 
@@ -614,7 +618,7 @@
 /// offset in the current file.
 SourceLocation Lexer::getSourceLocation(const char *Loc,
                                         unsigned TokLen) const {
-  assert(Loc >= BufferStart && Loc <= BufferEnd &&
+  assert(Loc >= BufferStart &&
          "Location out of range for this buffer!");
 
   // In the normal case, we're just lexing from a simple file buffer, return
Index: clang/include/clang/Lex/Preprocessor.h
===================================================================
--- clang/include/clang/Lex/Preprocessor.h	(revision 118054)
+++ clang/include/clang/Lex/Preprocessor.h	(working copy)
@@ -323,6 +323,12 @@
   /// Note that this ignores any potentially active macro expansions and _Pragma
   /// expansions going on at the time.
   PreprocessorLexer *getCurrentFileLexer() const;
+  
+  /// get top-most lexer
+  PreprocessorLexer* getTopmostLexer() const {
+    if (IncludeMacroStack.empty()) return 0;
+    return IncludeMacroStack[0].TheLexer;
+  }
 
   /// getPPCallbacks/addPPCallbacks - Accessors for preprocessor callbacks.
   /// Note that this class takes ownership of any PPCallbacks object given to
