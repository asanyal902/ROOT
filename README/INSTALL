Installation of ROOT from source
================================

To install ROOT from source you first have to get the tar file
containing the source. This tar file can be found in the usual
ROOT download area (ftp://root.cern.ch/root).

An alternative approach is to use our public CVS repository to get
the latest version. See URL: http://root.cern.ch/root/CVS.html.

Before proceeding read the complete document.

There are two main methods of installing ROOT from source.

1) You have noting installed yet.
   - get the source tar file of the latest ROOT
   - unpack source tar file, this creates directory `root':
        tar zxvf root_v2.25.01.source.tar.gz
   - set ROOTSYS to the `root' directory:
        export ROOTSYS=<path>/root
   - now type the build commands:
        ./configure --help
        ./configure <arch>        [change arch appropriately]
        gmake                     [or, make -j2 for dual CPU machines]
        gmake install             [when run directory is not $ROOTSYS]
   - add $ROOTSYS/bin to PATH and $ROOTSYS/lib to LD_LIBRARY_PATH:
        export PATH=$ROOTSYS/bin:$PATH
        export LD_LIBRARY_PATH=$ROOTSYS/lib:$LD_LIBRARY_PATH
   - try running root:
        root

2) You want to install ROOT in a fixed location, not depending on ROOTSYS.
   Typically you want to do this when installing in a location like
   `/usr/local/bin' or even `/usr/bin'. This allows you, and all others on
   your system, to run ROOT without having to setup ROOTSYS and special
   PATH and LD_LIBRARY_PATH variables. This scheme also makes it easier
   to make ROOT distributions/installations that fit with an existing system.
   E.g., it should be trivial to install ROOT via a RedHat (.rpm) or Debian
   (.dep) package.
   - get source tar file of latest ROOT
   - unpack source tar file, this creates directory `root':
        tar zxvf root_v2.25.01.source.tar.gz
   - set ROOTSYS to the `root' directory (only needed during installation):
        export ROOTSYS=<path>/root
   - now type the build commands:
        ./configure --help
        ./configure <arch> --prefix=/usr/local [change arch appropriately]
        gmake                   [or, make -j2, for dual CPU machines]
        gmake install           [su to root if --prefix points to a system dir]
   - try running root:
        root


Installation Location
=====================

  By default, the system will be installed depending on the ROOTSYS
environment variable. In that case the whole package will live under the
directory ROOTSYS points to.

Using the fixed location mode (option 2 above), the default `--prefix'
path is `/usr/local', which will result in the ROOT files to be installed
in `/usr/local/bin', `/usr/local/lib', etc. You can specify an installation
prefix other than `/usr/local' by giving `configure' the option
`--prefix=PATH'. For more detailed location specifications see
`configure --help'.


Makefile targets
================

  The Makefile system and supported make targets are explained in the
BUILDSYSTEM file.


Installing optional add-on libraries
====================================

If you want to compile the ROOT optional add-on libraries to handle
TrueType fonts, OpenGL graphics, SRP authentication, MySQL access,
RFIO access and event generator interfaces (Pythia, Pythia6 and
Venus) you can either specify the options as environment variables
or as arguments to the ./configure script. For example:

# Used during build of ROOT can be overriden in ./configure
export ROOTBUILD=debug        # see $ROOTSYS/README/BUILDSYSTEM
export CERNLIB=~/cernlib      # must contain libpacklib.a libkernlib.a
export RFIO=~/shift-1.10.2.9/lib/libshift.a  # CERN's SHIFT library
export TTF=~/ttf              # must contain fonts/ (and possibly include/ lib/)
export OPENGL=~/Mesa-3.2      # must contain include/ lib/
export SRP=~/src/srp-1.5.0    # must contain include/ lib/
#export AFS=                   # must contain include/ lib/
#export XPM=                   # must contain libXpm.a
#export MYSQL=                 # must contain include/ lib/
#export PYTHIA=                # must contain libPythia
#export PYTHIA6=               # must contain libPythia6
#export VENUS=                 # must contain libVenus

Alternatively you can also specify the location via `configure' flags
(`--with--opengl-libdir, --with-opengl-incdir, --with-ttf-fontdir,
--with-ttf-libdir, --with-ttf-incdir).

On very few systems libXpm.a is not available. In that case get the
pre-built version from ftp://root.cern.ch/root/xpm/. To use this
library define either the environment variable `XPM=<path>/libXpm.a'
or the `configure' flag `--with-xpm=<path>/libXpm.a'

On how to get the TrueType ttf directory see:
   http://root.cern.ch/root/TrueType.html
   (for prebuilt versions see: ftp://root.cern.ch/root/ttf/)

On how to get an open source version of OpenGL see:
   http://www.mesa3d.org
   (for prebuilt versions see: ftp://root.cern.ch/root/opengl/)

The optional add-on's are not necessary for the proper functioning of
ROOT but we advice you to at least get the TrueType fonts since they
hugely increase the appearance of text on the screen.


Other Optional Features
=======================

To build the library providing thread support you need to define either
the environment variable `THREAD=-lpthread' or the `configure' flag
`--with-thread=-lpthread' (it is the default for the linuxegcs architecture).

To build the library providing CERN RFIO (remote I/O) support you need to
define either the environment variable `RFIO=<path>/libshift.a' or the
`configure' flag `--with-rfio=<path>/libshift.a'.

To build the PAW and Geant3 conversion programs `h2root' and `g2root'
you need to define either the enviroment variable `CERNLIB=<cernlibpath>'
or the `configure' flag `--with-cern-libdir=<cernlibpath>'.

To build the MySQL interface library you need to install MySQL first. See:
   http://www.mysql.com/

To build the strong authentication module used by rootd, you first have to
install the SRP (Secure Remote Password) system. See:
   http://jafar.stanford.edu/srp/index.html
To use the library you have to define either the environment variable `SRP=<srpdir>' or the `configure'
flag `--with-srp=<srpdir>'.

To build the event generator interfaces for Pythia and Pythia6, you first
have to get the pythia libraries:
   ftp://root.cern.ch/root/pythia/
To use the libraries you have to define either `PYTHIA=<pythiadir>' or
the `configure' flag `--with-pythia=<pythiadir>'. The same for Pythia6.
