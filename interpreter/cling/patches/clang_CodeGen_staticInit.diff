Index: interpreter/llvm/src/tools/clang/lib/CodeGen/CodeGenModule.cpp
===================================================================
--- interpreter/llvm/src/tools/clang/lib/CodeGen/CodeGenModule.cpp	(revision 48857)
+++ interpreter/llvm/src/tools/clang/lib/CodeGen/CodeGenModule.cpp	(revision 48975)
@@ -443,7 +443,7 @@
   GlobalDtors.push_back(std::make_pair(Dtor, Priority));
 }
 
-void CodeGenModule::EmitCtorList(const CtorList &Fns, const char *GlobalName) {
+void CodeGenModule::EmitCtorList(CtorList &Fns, const char *GlobalName) {
   // Ctor function type is void()*.
   llvm::FunctionType* CtorFTy = llvm::FunctionType::get(VoidTy, false);
   llvm::Type *CtorPFTy = llvm::PointerType::getUnqual(CtorFTy);
@@ -469,6 +469,8 @@
                              llvm::ConstantArray::get(AT, Ctors),
                              GlobalName);
   }
+
+  Fns.clear();
 }
 
 llvm::GlobalValue::LinkageTypes
Index: interpreter/llvm/src/tools/clang/include/clang/CodeGen/CodeGenModule.h
===================================================================
--- interpreter/llvm/src/tools/clang/include/clang/CodeGen/CodeGenModule.h	(revision 48857)
+++ interpreter/llvm/src/tools/clang/include/clang/CodeGen/CodeGenModule.h	(revision 48975)
@@ -960,8 +960,8 @@
 
   /// EmitCtorList - Generates a global array of functions and priorities using
   /// the given list and name. This array will have appending linkage and is
-  /// suitable for use as a LLVM constructor or destructor array.
-  void EmitCtorList(const CtorList &Fns, const char *GlobalName);
+  /// suitable for use as a LLVM constructor or destructor array. Clears Fns.
+  void EmitCtorList(CtorList &Fns, const char *GlobalName);
 
   /// EmitFundamentalRTTIDescriptor - Emit the RTTI descriptors for the
   /// given type.
