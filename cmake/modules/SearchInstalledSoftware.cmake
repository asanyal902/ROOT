#---Check for installed packages-----------------------------------------------------

#---Check if (N)Curses is installed. If neither is installed switch off editline----- 
if(editline)
  message(STATUS "Looking for NCurses")
  set(CURSES_NEED_NCURSES TRUE)
  find_package(Curses)
  if(NOT CURSES_FOUND)
    message(STATUS "Looking for Curses")
    set(CURSES_NEED_NCURSES FALSE)
    find_package(Curses)
  endif()
  if(CURSES_FOUND)
    if(CURSES_HAVE_CURSES_H)
      set(CURSES_HEADER_FILE ${CURSES_HAVE_CURSES_H})
    endif()
    if(CURSES_HAVE_NCURSES_H)
      set(CURSES_HEADER_FILE ${CURSES_HAVE_NCURSES_H})
    endif()
  else()
    set(editline OFF)
  endif()
endif()

#---Check for Zlib ------------------------------------------------------------------
message(STATUS "Looking for ZLib")
find_Package(ZLIB)
if(ZLIB_FOUND)
  set(zlib OFF)
else()
  set(zlib ON)
endif()

#---Check for Freetype---------------------------------------------------------------
message(STATUS "Looking for Freetype")
find_package(Freetype)
if(FREETYPE_FOUND)
  set(builtin_freetype OFF)
  set(FREETYPE_INCLUDE_DIR ${FREETYPE_INCLUDE_DIR_freetype2})
else()
  set(builtin_freetype ON)
  set(FREETYPE_INCLUDE_DIR ${CMAKE_BINARY_DIR}/graf2d/freetype/${FREETYPE_VERSION}/include)
  Set(FREETYPE_LIBRARIES "-L${LIBRARY_OUTPUT_PATH} -lfreetype")
endif()

#---Check for X11 which is mandatory lib on Unix--------------------------------------
message(STATUS "Looking for X11")
find_package(X11 REQUIRED)
if(X11_FOUND)
  list(REMOVE_DUPLICATES X11_INCLUDE_DIR)
  message(STATUS "X11_INCLUDE_DIR: ${X11_INCLUDE_DIR}")
  message(STATUS "X11_LIBRARIES: ${X11_LIBRARIES}")
else()
  message(FATAL_ERROR "libX11 and X11 headers must be installed.")
endif()
if(X11_Xpm_FOUND)
  message(STATUS "X11_Xpm_INCLUDE_PATH: ${X11_Xpm_INCLUDE_PATH}")
  message(STATUS "X11_Xpm_LIB: ${X11_Xpm_LIB}")
else()
  message(FATAL_ERROR "libXpm and Xpm headers must be installed.")
endif()
if(X11_Xft_FOUND)
  message(STATUS "X11_Xft_INCLUDE_PATH: ${X11_Xft_INCLUDE_PATH}")
  message(STATUS "X11_Xft_LIB: ${X11_Xft_LIB}")
else()
  message(FATAL_ERROR "libXft and Xft headers must be installed.")
endif()
if(X11_Xext_FOUND)
  message(STATUS "X11_Xext_INCLUDE_PATH: ${X11_Xext_INCLUDE_PATH}")
  message(STATUS "X11_Xext_LIB: ${X11_Xext_LIB}")
else()
  message(FATAL_ERROR "libXext and Xext headers must be installed.")
endif()

#---Check for all kind of graphics includes needed by libAfterImage--------------------
if(asimage)
  set(ASEXTRA_LIBRARIES)
  find_Package(GIF)
  if(GIF_FOUND)
    set(ASEXTRA_LIBRARIES ${ASEXTRA_LIBRARIES} ${GIF_LIBRARIES})
  endif()
  find_Package(TIFF)
  if(TIFF_FOUND)
    set(ASEXTRA_LIBRARIES ${ASEXTRA_LIBRARIES} ${TIFF_LIBRARIES})
  endif()
  find_Package(PNG)
  if(PNG_FOUND)
    set(ASEXTRA_LIBRARIES ${ASEXTRA_LIBRARIES} ${PNG_LIBRARIES})
  endif()
  find_Package(JPEG)
  if(JPEG_FOUND)
    set(ASEXTRA_LIBRARIES ${ASEXTRA_LIBRARIES} ${JPEG_LIBRARIES})
  endif()
endif()

#---Check for GSL library---------------------------------------------------------------
if(mathmore)
  message(STATUS "Looking for GSL")
  find_package(GSL)
  if(NOT GSL_FOUND)
    if(fail-on-missing)
      message(FATAL_ERROR "GSL package not found and mathmore component required")
    else()
      set(mathmore OFF)
      message(STATUS "GSL not found. Switching off mathmore option")
    endif()
  endif()
endif()

#---Check for Python installation-------------------------------------------------------
if(python)
  message(STATUS "Looking for Python")
  find_package(PythonLibs)
  if(NOT PYTHONLIBS_FOUND)
    if(fail-on-missing)
      message(FATAL_ERROR "PythonLibs package not found and python component required")
    else()
      set(python OFF)
      message(STATUS "Python not found. Switching off python option")
    endif()
  endif()
endif()

#---Check for OpenGL installation-------------------------------------------------------
if(opengl)
  message(STATUS "Looking for OpenGL")
  find_package(OpenGL)
  if(NOT OPENGL_FOUND)
    if(fail-on-missing)
      message(FATAL_ERROR "OpenGL package not found and opengl option required")
    else()
      set(opengl OFF)
      message(STATUS "OpenGL not found. Switching off opengl option")
    endif()
  endif()
endif()

#---Check for Qt installation-------------------------------------------------------
if(qt)
  message(STATUS "Looking for Qt4")
  find_package(Qt4 COMPONENTS QtCore QtGui)
  if(NOT QT4_FOUND)
    if(fail-on-missing)
      message(FATAL_ERROR "Qt4 package not found and qt component required")
    else()
      set(qt OFF)
      message(STATUS "Qt4 not found. Switching off qt option")
    endif()
  endif()
endif()


#---Check for Bonjour installation-------------------------------------------------------
if(bonjour)
  message(STATUS "Looking for Bonjour")
  find_package(Bonjour)
  if(NOT BONJOUR_FOUND)
    if(fail-on-missing)
      message(FATAL_ERROR "Bonjour/Avahi libraries not found and Bonjour component required")
    else()
      set(bonjour OFF)
      message(STATUS "Bonjour not found. Switching off bonjour option")
    endif()
  endif()
endif()


#---Check for krb5 Support-----------------------------------------------------------
if(krb5)
  message(STATUS "Looking for Kerberos 5")
  find_package(Kerberos5)
  if(NOT KRB5_FOUND)
    if(fail-on-missing)
      message(FATAL_ERROR "Kerberos 5 libraries not found and they are required")
    else()
      set(krb5 OFF)
      message(STATUS "Kerberos 5 not found. Switching off krb5 option")
    endif()
  endif()
endif()