MACRO(SearchInstalledSoftware)

#Check for installed packages

# Check for X11 on UNIX systems. Need X11, Xpm, Xft and Xext libraries and headers.
if(UNIX)
#  find_package(X11 REQUIRED)
#  if(NOT X11_FOUND)
#    MESSAGE(FATAL_ERROR "Could not find X11 libraries and Headers. The required packages must be installed.")
#  else(NOT X11_FOUND)
#    if(NOT X11_Xft_FOUND)
#      CHANGE_ROOT_INSTALL_OPTIONS(xft FALSE) 
#    else(NOT X11_Xft_FOUND)
#      MESSAGE(STATUS "Found Xft ${X11_Xft_LIB}")
#      SET(R__HAS_XFT TRUE)
#    endif(NOT X11_Xft_FOUND)
#    if(NOT X11_Xpm_FOUND)
#      MESSAGE(FATAL_ERROR "Could not find X11 Xpm library. The required package must be installed.")
#    else(NOT X11_Xpm_FOUND)
#      MESSAGE(STATUS "Found Xpm ${X11_Xpm_LIB}")
#    endif(NOT X11_Xpm_FOUND)
#    if(NOT X11_Xext_FOUND)
#      MESSAGE(FATAL_ERROR "Could not find X11 Xext library. The required package must be installed.")
#    else(NOT X11_Xext_FOUND)
#      MESSAGE(STATUS "Found Xext ${X11_Xext_LIB}")
#    endif(NOT X11_Xext_FOUND)
#  endif(NOT X11_FOUND)
else(UNIX)
  CHANGE_ROOT_INSTALL_OPTIONS(xft FALSE) 
endif(UNIX)

#Check for threading support
find_package(Threads)
if(NOT UNIX)
  CHANGE_ROOT_INSTALL_OPTIONS(thread TRUE)   
else(NOT UNIX)
  if(CMAKE_THREAD_LIBS_INIT)
    CHANGE_ROOT_INSTALL_OPTIONS(thread TRUE)
    SET(R__HAS_PTHREAD TRUE)   
  else(CMAKE_THREAD_LIBS_INIT)
    CHANGE_ROOT_INSTALL_OPTIONS(thread FALSE)   
  endif(CMAKE_THREAD_LIBS_INIT)
endif(NOT UNIX)

#check if freetype is installed and version is higher than 9.3.0
is_root_install_option_enabled(builtin_freetype)
if(NOT option_builtin_freetype_is_enabled)
  find_package(Freetype)
  if(FREETYPE_FOUND)
    macro_ensure_version("9.3.0" ${FREETYPE_VERSION} FREETYPE_VERSION_OK)
    if(FREETYPE_VERSION_OK)
      CHANGE_ROOT_INSTALL_OPTIONS(builtin_freetype FALSE)   
    else(FREETYPE_VERSION_OK)
      CHANGE_ROOT_INSTALL_OPTIONS(builtin_freetype TRUE)   
    endif(FREETYPE_VERSION_OK)
  else(FREETYPE_FOUND)
    CHANGE_ROOT_INSTALL_OPTIONS(builtin_freetype TRUE)   
  endif(FREETYPE_FOUND)
endif(NOT option_builtin_freetype_is_enabled)

#check if FTGL is installed
#find_package(FTGL) TODO create the cmake script
CHANGE_ROOT_INSTALL_OPTIONS(builtin_ftgl TRUE)   

#check if PCRE is installed
#find_package(PCRE) TODO create the cmake script
CHANGE_ROOT_INSTALL_OPTIONS(builtin_pcre TRUE)   

#check if zlib is installed
is_root_install_option_enabled(builtin_zlib)
if(NOT option_builtin_zlib_is_enabled)
  find_package(ZLIB)
  if(ZLIB_FOUND)
    CHANGE_ROOT_INSTALL_OPTIONS(builtin_freetype FALSE)   
  else(ZLIB_FOUND)
    CHANGE_ROOT_INSTALL_OPTIONS(builtin_freetype TRUE)   
    set(zliblib "")
  endif(ZLIB_FOUND)
endif(NOT option_builtin_zlib_is_enabled)

#check if OpenGL is installed
is_root_install_option_enabled(opengl)
if(option_opengl_is_enabled)
  MESSAGE(STATUS "Looking for OpenGL and GLU")
  find_package(OpenGL)
  if(OPENGL_FOUND AND OPENGL_GLU_FOUND)
    MESSAGE(STATUS "Looking for OpenGL - found ${OPENGL_LIBRARIES}")
  else(OPENGL_FOUND AND OPENGL_GLU_FOUND)
    MESSAGE(STATUS "Looking for OpenGL - not found")
    CHANGE_ROOT_INSTALL_OPTIONS(opengl FALSE)       
  endif(OPENGL_FOUND AND OPENGL_GLU_FOUND)
endif(option_opengl_is_enabled)

#check if mysql is installed only if mysql support is enabled
is_root_install_option_enabled(mysql)
if(option_mysql_is_enabled)
  MESSAGE(STATUS "Looking for MySQL")
  find_package(MySQL)
  if(MYSQL_FOUND)
    MESSAGE(STATUS "Looking for MySQL - found ${MYSQL_LIBRARIES}")
  else(MYSQL_FOUND)
    MESSAGE(STATUS "Looking for MySQL - not found ")
    CHANGE_ROOT_INSTALL_OPTIONS(mysql FALSE)       
  endif(MYSQL_FOUND)
endif(option_mysql_is_enabled)

#check if Oracle is installed only if oracle support is enabled
is_root_install_option_enabled(oracle)
if(option_oracle_is_enabled)
  MESSAGE(STATUS "Looking for Oracle")
  find_package(Oracle)
  if(ORACLE_FOUND)
    MESSAGE(STATUS "Looking for Oracle - found ${ORACLE_LIBRARIES}")
  else(ORACLE_FOUND)
    MESSAGE(STATUS "Looking for Oracle - not found ")
    CHANGE_ROOT_INSTALL_OPTIONS(oracle FALSE)       
  endif(ORACLE_FOUND)
endif(option_oracle_is_enabled)

#check if PostgreSQL is installed only if PostgreSQL support is enabled
#is_root_install_option_enabled(pgsql)
#if(option_pgsql_is_enabled)
#  MESSAGE(STATUS "Looking for PostgreSQL")
#  find_package(PostgreSQL)
#  if(POSTGRESQL_FOUND)
#    MESSAGE(STATUS "Looking for PostgreSQL - found ${POSTGRESQL_LIBRARIES}")
#  else(POSTGRESQL_FOUND)
#    MESSAGE(STATUS "Looking for PostgreSQL - not found ")
#    CHANGE_ROOT_INSTALL_OPTIONS(pgsql FALSE)       
#  endif(POSTGRESQL_FOUND)
#endif(option_pgsql_is_enabled)

#check if SapDB is installed only if SapDB support is enabled
is_root_install_option_enabled(sapdb)
if(option_sapdb_is_enabled)
  MESSAGE(STATUS "Looking for SapDB")
#  find_package(PostgreSQL)
#  if(POSTGRESQL_FOUND)
#    MESSAGE(STATUS "Looking for SapDB - found ${POSTGRESQL_LIBRARIES}")
#  else(POSTGRESQL_FOUND)
    MESSAGE(STATUS "Looking for SapDB - not found ")
    CHANGE_ROOT_INSTALL_OPTIONS(sapdb FALSE)       
#  endif(POSTGRESQL_FOUND)
endif(option_sapdb_is_enabled)

#check if ODBC support is installed only if ODBC support is enabled
is_root_install_option_enabled(odbc)
if(option_odbc_is_enabled)
  MESSAGE(STATUS "Looking for ODBC support")
endif(option_odbc_is_enabled)

#check if QT is installed only if QT is enabled
is_root_install_option_enabled(qt)
is_root_install_option_enabled(qt-gsi)
if(option_qt_is_enabled OR otion_qt_gsi_is_enabled)
  MESSAGE(STATUS "Looking for QT4")
  IF(QT4_FOUND)
    MACRO_ENSURE_VERSION_RANGE3( "4.3.0" ${QT_VERSION_MAJOR}.${QT_VERSION_MINOR}.${QT_VERSION_PATCH} "5.0.0" QT4_VERSION_OK )
     IF(QT4_VERSION_OK)
       MESSAGE(STATUS "Looking for QT4 - found ${QT_VERSION_MAJOR}.${QT_VERSION_MINOR}.${QT_VERSION_PATCH}")
     ELSE(QT4_VERSION_OK)
       MESSAGE(WARNING "Looking for QT4 - found ${QT_VERSION_MAJOR}.${QT_VERSION_MINOR}.${QT_VERSION_PATCH} which is not in the allowed range between 4.3.0 and 5.0.0")
     ENDIF(QT4_VERSION_OK)
  ELSE(QT4_FOUND)
    MESSAGE(STATUS "Looking for QT3")
    IF(QT3_FOUND)
      MACRO_ENSURE_VERSION_RANGE3( "3.3.0" ${QT_VERSION_MAJOR}.${QT_VERSION_MINOR}.${QT_VERSION_PATCH} "4.0.0" QT3_VERSION_OK )
       IF(QT3_VERSION_OK)
         MESSAGE(STATUS "Looking for QT3 - found ${QT_VERSION_MAJOR}.${QT_VERSION_MINOR}.${QT_VERSION_PATCH}")
       ELSE(QT3_VERSION_OK)
         MESSAGE(WARNING "Looking for QT3 - found ${QT_VERSION_MAJOR}.${QT_VERSION_MINOR}.${QT_VERSION_PATCH} which is not in the allowed range between 3.3.0 and 4.0.0")
         CHANGE_ROOT_INSTALL_OPTIONS(qt FALSE)       
         CHANGE_ROOT_INSTALL_OPTIONS(qt-gsi FALSE)       
       ENDIF(QT3_VERSION_OK)
    ELSE(QT3_FOUND)
      MESSAGE(WARNING "Looking for QT3 - not found")
      CHANGE_ROOT_INSTALL_OPTIONS(qt FALSE)       
      CHANGE_ROOT_INSTALL_OPTIONS(qt-gsi FALSE)       
    ENDIF(QT3_FOUND)
  ENDIF(QT4_FOUND)
endif(option_qt_is_enabled OR otion_qt_gsi_is_enabled)

is_root_install_option_enabled(rfio)
if(option_rfio_is_enabled)
  MESSAGE(STATUS "Looking for RFIO")
  MESSAGE(STATUS "Looking for RFIO - Check not implemented up to now")
  CHANGE_ROOT_INSTALL_OPTIONS(rfio FALSE)       
endif(option_rfio_is_enabled)

is_root_install_option_enabled(castor)
if(option_castor_is_enabled)
  MESSAGE(STATUS "Looking for Castor")
  MESSAGE(STATUS "Looking for Castor - Check not implemented up to now")
  CHANGE_ROOT_INSTALL_OPTIONS(castor FALSE)       
endif(option_castor_is_enabled)

is_root_install_option_enabled(gfal)
if(option_gfal_is_enabled)
  MESSAGE(STATUS "Looking for GFAL")
  MESSAGE(STATUS "Looking for GFAL - Check not implemented up to now")
  CHANGE_ROOT_INSTALL_OPTIONS(gfal FALSE)       
endif(option_gfal_is_enabled)

is_root_install_option_enabled(g4root)
if(option_g4root_is_enabled)
  MESSAGE(STATUS "Looking for Geant4")
  MESSAGE(STATUS "Looking for Geant4 - Check not implemented up to now")
  CHANGE_ROOT_INSTALL_OPTIONS(g4root FALSE)       
endif(option_g4root_is_enabled)

is_root_install_option_enabled(monalisa)
if(option_monalisa_is_enabled)
  MESSAGE(STATUS "Looking for MonaLisa")
  MESSAGE(STATUS "Looking for MonaLisa - Check not implemented up to now")
  CHANGE_ROOT_INSTALL_OPTIONS(monalisa FALSE)       
endif(option_monalisa_is_enabled)

is_root_install_option_enabled(fftw3)
if(option_fftw3_is_enabled)
  MESSAGE(STATUS "Looking for FFTW3")
  MESSAGE(STATUS "Looking for FFTW3 - Check not implemented up to now")
  CHANGE_ROOT_INSTALL_OPTIONS(fftw3 FALSE)       
endif(option_fftw3_is_enabled)

is_root_install_option_enabled(pythia6)
if(option_pythia6_is_enabled)
  MESSAGE(STATUS "Looking for Pythia6")
  MESSAGE(STATUS "Looking for Pythia6 - Check not implemented up to now")
  CHANGE_ROOT_INSTALL_OPTIONS(pythia6 FALSE)       
endif(option_pythia6_is_enabled)

is_root_install_option_enabled(pythia8)
if(option_pythia8_is_enabled)
  MESSAGE(STATUS "Looking for Pythia8")
  MESSAGE(STATUS "Looking for Pythia8 - Check not implemented up to now")
  CHANGE_ROOT_INSTALL_OPTIONS(pythia8 FALSE)       
endif(option_pythia8_is_enabled)

is_root_install_option_enabled(dcache)
if(option_dcache_is_enabled)
  MESSAGE(STATUS "Looking for dCache")
  MESSAGE(STATUS "Looking for dCache - Check not implemented up to now")
  CHANGE_ROOT_INSTALL_OPTIONS(dcache FALSE)       
endif(option_dcache_is_enabled)

is_root_install_option_enabled(chirp)
if(option_chirp_is_enabled)
  MESSAGE(STATUS "Looking for Chirp")
  MESSAGE(STATUS "Looking for Chirp - Check not implemented up to now")
  CHANGE_ROOT_INSTALL_OPTIONS(chirp FALSE)       
endif(option_chirp_is_enabled)

is_root_install_option_enabled(glite)
if(option_glite_is_enabled)
  MESSAGE(STATUS "Looking for gLite")
  MESSAGE(STATUS "Looking for gLite - Check not implemented up to now")
  CHANGE_ROOT_INSTALL_OPTIONS(glite FALSE)       
endif(option_glite_is_enabled)

is_root_install_option_enabled(alien)
if(option_alien_is_enabled)
  MESSAGE(STATUS "Looking for AliEn")
  MESSAGE(STATUS "Looking for AliEn - Check not implemented up to now")
  CHANGE_ROOT_INSTALL_OPTIONS(alien FALSE)       
endif(option_alien_is_enabled)

is_root_install_option_enabled(builtin_afterimage)
if(NOT option_builtin_afterimage_is_enabled)
  MESSAGE(STATUS "Looking for libafterimage")
  MESSAGE(STATUS "Looking for libafterimage - Use builtin version of libafterimage")
  CHANGE_ROOT_INSTALL_OPTIONS(builtin_afterimage TRUE)       
endif(NOT option_builtin_afterimage_is_enabled)

is_root_install_option_enabled(ldap)
if(option_ldap_is_enabled)
  MESSAGE(STATUS "Looking for LDAP")
  MESSAGE(STATUS "Looking for LDAP - Check not implemented up to now")
  CHANGE_ROOT_INSTALL_OPTIONS(ldap FALSE)       
endif(option_ldap_is_enabled)

is_root_install_option_enabled(python)
if(option_python_is_enabled)
  MESSAGE(STATUS "Looking for Python")
  find_package(PythonInterp)
  if(PYTHONINTERP_FOUND)
    execute_process(COMMAND ${PYTHON_EXECUTABLE} -c "import sys; print sys.version[:3];" OUTPUT_VARIABLE PYTHON_VERSION)
    STRING(SUBSTRING ${PYTHON_VERSION} 0 3 PYTHON_VERSION)
    MESSAGE(STATUS "Looking for Python - found version ${PYTHON_VERSION}")
  endif(PYTHONINTERP_FOUND)
  find_package(PythonLibs)
endif(option_python_is_enabled)

is_root_install_option_enabled(ruby)
if(option_ruby_is_enabled)
  MESSAGE(STATUS "Looking for Ruby")
  MESSAGE(STATUS "Looking for Ruby - Check not implemented up to now")
  CHANGE_ROOT_INSTALL_OPTIONS(ruby FALSE)       
endif(option_ruby_is_enabled)

is_root_install_option_enabled(xml)
if(option_xml_is_enabled)
  MESSAGE(STATUS "Looking for Xml")
  MESSAGE(STATUS "Looking for Xml - Check not implemented up to now")
  CHANGE_ROOT_INSTALL_OPTIONS(xml FALSE)       
endif(option_xml_is_enabled)

is_root_install_option_enabled(xrootd)
if(option_xrootd_is_enabled)
  MESSAGE(STATUS "Looking for Xrootd")
  MESSAGE(STATUS "Looking for Xrootd - Check not implemented up to now")
  CHANGE_ROOT_INSTALL_OPTIONS(xrootd FALSE)       
endif(option_xrootd_is_enabled)

is_root_install_option_enabled(globus)
if(option_globus_is_enabled)
  MESSAGE(STATUS "Looking for Globus")
  MESSAGE(STATUS "Looking for Globus - Check not implemented up to now")
  CHANGE_ROOT_INSTALL_OPTIONS(globus FALSE)       
endif(option_globus_is_enabled)

is_root_install_option_enabled(ssl)
if(option_ssl_is_enabled)
  MESSAGE(STATUS "Looking for SSL")
  MESSAGE(STATUS "Looking for SSL - Check not implemented up to now")
  CHANGE_ROOT_INSTALL_OPTIONS(ssl FALSE)       
endif(option_ssl_is_enabled)

is_root_install_option_enabled(srp)
if(option_srp_is_enabled)
  MESSAGE(STATUS "Looking for SRP")
  MESSAGE(STATUS "Looking for SRP - Check not implemented up to now")
  CHANGE_ROOT_INSTALL_OPTIONS(srp FALSE)       
endif(option_srp_is_enabled)

is_root_install_option_enabled(afs)
if(option_afs_is_enabled)
  MESSAGE(STATUS "Looking for AFS")
  MESSAGE(STATUS "Looking for AFS - Check not implemented up to now")
  CHANGE_ROOT_INSTALL_OPTIONS(afs FALSE)       
endif(option_afs_is_enabled)

is_root_install_option_enabled(krb5)
if(option_krb5_is_enabled)
  MESSAGE(STATUS "Looking for krb5")
  MESSAGE(STATUS "Looking for krb5 - Check not implemented up to now")
  CHANGE_ROOT_INSTALL_OPTIONS(krb5 FALSE)       
endif(option_krb5_is_enabled)

is_root_install_option_enabled(shadowpw)
if(option_shadowpw_is_enabled)
  MESSAGE(STATUS "Looking for Shadowpw")
  MESSAGE(STATUS "Looking for Shadowpw - Check not implemented up to now")
  CHANGE_ROOT_INSTALL_OPTIONS(shadowpw FALSE)       
endif(option_shadowpw_is_enabled)

is_root_install_option_enabled(mathmore)
if(option_mathmore_is_enabled)
  MESSAGE(STATUS "Looking for GSL")
  MESSAGE(STATUS "Looking for GSL - Check not implemented up to now")
  CHANGE_ROOT_INSTALL_OPTIONS(mathmore FALSE)       
endif(option_mathmore_is_enabled)

is_root_install_option_enabled(genvector)
if(option_genvector_is_enabled)
  MESSAGE(STATUS "Looking for GenVector")
  MESSAGE(STATUS "Looking for GenVector - Check not implemented up to now")
  CHANGE_ROOT_INSTALL_OPTIONS(genvector FALSE)       
endif(option_genvector_is_enabled)

is_root_install_option_enabled(cint7)
if(option_cint7_is_enabled)
  MESSAGE(STATUS "Looking for Cint7")
  MESSAGE(STATUS "Looking for Cint7 - Check not implemented up to now")
  CHANGE_ROOT_INSTALL_OPTIONS(cint7 FALSE)       
endif(option_cint7_is_enabled)

is_root_install_option_enabled(cintex)
if(option_cintex_is_enabled)
  MESSAGE(STATUS "Looking for Cintex")
  MESSAGE(STATUS "Looking for Cintex - Check not implemented up to now")
  CHANGE_ROOT_INSTALL_OPTIONS(cintex FALSE)       
endif(option_cintex_is_enabled)

is_root_install_option_enabled(reflex)
if(option_reflex_is_enabled)
  MESSAGE(STATUS "Looking for Reflex")
  MESSAGE(STATUS "Looking for Reflex - Check not implemented up to now")
  CHANGE_ROOT_INSTALL_OPTIONS(reflex FALSE)       
endif(option_reflex_is_enabled)

is_root_install_option_enabled(roofit)
if(option_roofit_is_enabled)
  MESSAGE(STATUS "Looking for Roofit")
  MESSAGE(STATUS "Looking for Roofit - Check not implemented up to now")
  CHANGE_ROOT_INSTALL_OPTIONS(roofit FALSE)       
endif(option_roofit_is_enabled)

is_root_install_option_enabled(minuit2)
if(option_minuit2_is_enabled)
  MESSAGE(STATUS "Looking for Minuit2")
  MESSAGE(STATUS "Looking for Minuit2 - Check not implemented up to now")
  CHANGE_ROOT_INSTALL_OPTIONS(minuit2 FALSE)       
endif(option_minuit2_is_enabled)

is_root_install_option_enabled(unuran)
if(option_unuran_is_enabled)
  MESSAGE(STATUS "Looking for Unuran")
  MESSAGE(STATUS "Looking for Unuran - Check not implemented up to now")
  CHANGE_ROOT_INSTALL_OPTIONS(unuran FALSE)       
endif(option_unuran_is_enabled)

is_root_install_option_enabled(gdml)
if(option_gdml_is_enabled)
  MESSAGE(STATUS "Looking for Gdml")
  MESSAGE(STATUS "Looking for Gdml - Check not implemented up to now")
  CHANGE_ROOT_INSTALL_OPTIONS(gdml FALSE)       
endif(option_gdml_is_enabled)

is_root_install_option_enabled(table)
if(option_table_is_enabled)
  MESSAGE(STATUS "Looking for Table")
  MESSAGE(STATUS "Looking for Table - Check not implemented up to now")
  CHANGE_ROOT_INSTALL_OPTIONS(table FALSE)       
endif(option_table_is_enabled)

is_root_install_option_enabled(memstat)
if(option_memstat_is_enabled)
  MESSAGE(STATUS "Looking for Memstat")
  MESSAGE(STATUS "Looking for Memstat - Check not implemented up to now")
  CHANGE_ROOT_INSTALL_OPTIONS(memstat FALSE)       
endif(option_memstat_is_enabled)

is_root_install_option_enabled(clarens)
if(option_clarens_is_enabled)
  MESSAGE(STATUS "Looking for Clarens")
  MESSAGE(STATUS "Looking for Clarens - Check not implemented up to now")
  CHANGE_ROOT_INSTALL_OPTIONS(clarens FALSE)       
  is_root_install_option_enabled(peac)
  if(option_peac_is_enabled)
    MESSAGE(STATUS "Looking for Peac")
    MESSAGE(STATUS "Looking for Peac - Check not implemented up to now")
    CHANGE_ROOT_INSTALL_OPTIONS(peac FALSE)       
  endif(option_peac_is_enabled)
else(option_clarens_is_enabled)
  CHANGE_ROOT_INSTALL_OPTIONS(peac FALSE)       
endif(option_clarens_is_enabled)

#is_root_install_option_enabled(nostubs)
#if(option_nostubs_is_enabled)
  MESSAGE(STATUS "Looking for Nostubs")
  MESSAGE(STATUS "Looking for Nostubs - Check not implemented up to now")
#  CHANGE_ROOT_INSTALL_OPTIONS(nostubs FALSE)       
#endif(option_nostubs_is_enabled)

ENDMACRO()