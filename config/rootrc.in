# @(#)root/config:$Name:  $:$Id: rootrc.in,v 1.58 2003/11/13 15:15:11 rdm Exp $
# Author: Fons Rademakers  22/09/95

# ROOT Environment settings are handled via the class TEnv. To see
# which values are active do: gEnv->Print().

# Path used by dynamic loader to find shared libraries and macros
# Paths are different for Unix and Windows. The example shows the defaults
# for all ROOT applications for either Unix or Windows.
Unix.*.Root.DynamicPath:    .:@libdir@
Unix.*.Root.MacroPath:      .:@macrodir@
WinNT.*.Root.DynamicPath:   .;@bindir@;$(PATH)
WinNT.*.Root.MacroPath:     .;@macrodir@

# Path where to look for TrueType fonts
Unix.*.Root.UseTTFonts:     true
Unix.*.Root.TTFontPath:     @ttffontdir@

# Use thread library (if exists)
Unix.*.Root.UseThreads:     false

# Show where item is found in the specified path
Root.ShowPath:           false

# Activate memory statistics (size and cnt is used to trap allocation of
# blocks of a certain size after cnt times)
Root.MemStat:            0
Root.MemStat.size:      -1
Root.MemStat.cnt:       -1
Root.ObjectStat:         0

# Activate memory leak checker (use in conjunction with $ROOTSYS/bin/memprobe)
# Currently only works on Linux with gcc.
Root.MemCheck:           0
Root.MemCheckFile:       memcheck.out

# Global debug mode. When >0 turns on progressively more details debugging.
Root.Debug:              0
Root.Stacktrace:         yes

# Settings for X11 behaviour.
X11.Sync:                no
X11.FindBestVisual:      yes

# Default editor
Unix.*.Editor:           vi
WinNT.*.Editor:          notepad

# Default Fitter (current choices are Minuit and Fumili)
Root.Fitter:             Minuit

# Specify list of file endings which TTabCom (TAB completion) should ignore.
#TabCom.FileIgnore:       .cpp:.h:.cmz

# TCanvas specific settings. Opaque move and resize show full pad during
# the operation instead of only the outline. Especially for resize you'll
# need serious CPU power. UseScreenFactor=true means to size canvas according
# to size of screen, so a canvas still looks good on a low resolution
# laptop screen without having to change canvas size in macros.
# HighLightColor 2 = red. ShowEventStatus allows the event status bar to
# be turned on by default. AutoExec allows TExec objects to be executed
# on mouse and key events.
Canvas.MoveOpaque:          false
Canvas.ResizeOpaque:        false
Canvas.UseScreenFactor:     true
Canvas.HighLightColor:      2
Canvas.ShowEventStatus:     false
Canvas.AutoExec:            true

# Default histogram binnings for TTree::Draw()
Hist.Binning.1D.x:          100

Hist.Binning.2D.x:           40
Hist.Binning.2D.y:           40
Hist.Binning.2D.Prof:       100

Hist.Binning.3D.x:           20
Hist.Binning.3D.y:           20
Hist.Binning.3D.z:           20
Hist.Binning.3D.Profx:      100
Hist.Binning.3D.Profy:      100

# THtml specific settings (for more see doc of THtml class)
Unix.*.Root.Html.SourceDir:  .:src:include
WinNT.*.Root.Html.SourceDir: .;src;include
Root.Html.Root:              http://root.cern.ch/root/html
#Root.Html.OutputDir:        htmldoc/
#Root.Html.Homepage:
#Root.Html.Header:
#Root.Html.Footer:
#Root.Html.Description:      //____________________
#Root.Html.Author:           // Author:
#Root.Html.LastUpdate:       // @(#)
#Root.Html.Copyright:        * Copyright

# GUI specific settings
Gui.Backend:                native
Gui.Factory:                native
Unix.*.Gui.DefaultFont:     -adobe-helvetica-medium-r-*-*-12-*-*-*-*-*-iso8859-1
Unix.*.Gui.MenuFont:        -adobe-helvetica-medium-r-*-*-12-*-*-*-*-*-iso8859-1
Unix.*.Gui.MenuHiFont:      -adobe-helvetica-bold-r-*-*-12-*-*-*-*-*-iso8859-1
Unix.*.Gui.DocFixedFont:    -adobe-courier-medium-r-*-*-12-*-*-*-*-*-iso8859-1
Unix.*.Gui.DocPropFont:     -adobe-helvetica-medium-r-*-*-12-*-*-*-*-*-iso8859-1
Unix.*.Gui.IconFont:        -adobe-helvetica-medium-r-*-*-10-*-*-*-*-*-iso8859-1
Unix.*.Gui.StatusFont:      -adobe-helvetica-medium-r-*-*-10-*-*-*-*-*-iso8859-1
WinNT.*.Gui.DefaultFont:     -adobe-helvetica-medium-r-*-*-15-*-*-*-*-*-iso8859-1
WinNT.*.Gui.MenuFont:        -adobe-helvetica-medium-r-*-*-15-*-*-*-*-*-iso8859-1
WinNT.*.Gui.MenuHiFont:      -adobe-helvetica-bold-r-*-*-15-*-*-*-*-*-iso8859-1
WinNT.*.Gui.DocFixedFont:    -adobe-courier-medium-r-*-*-15-*-*-*-*-*-iso8859-1
WinNT.*.Gui.DocPropFont:     -adobe-helvetica-medium-r-*-*-15-*-*-*-*-*-iso8859-1
WinNT.*.Gui.IconFont:        -adobe-helvetica-medium-r-*-*-15-*-*-*-*-*-iso8859-1
WinNT.*.Gui.StatusFont:      -adobe-helvetica-medium-r-*-*-15-*-*-*-*-*-iso8859-1
Gui.BackgroundColor:         #c0c0c0
Gui.ForegroundColor:         black
Gui.SelectBackgroundColor:   #000080
Gui.SelectForegroundColor:   white
Gui.DocumentBackgroundColor: white
Gui.DocumentForegroundColor: black
Gui.TooltipBackgroundColor:  LightYellow
Gui.TooltipForegroundColor:  black
Gui.IconPath:                $(HOME)/icons:@iconpath@:.
Gui.MimeTypeFile:            $(HOME)/.root.mimes
# If above does not exists defaults to this:
#Gui.MimeTypeFile:            @etcdir@/root.mimes
# Can be either small, big, list, details
Browser.IconStyle:           small
# Can be either name, type, size, date
Browser.SortBy:              name
Browser.GroupView:           1000
Browser.ShowHidden:          no

# Rint (interactive ROOT executable) specific alias, logon and logoff macros
Rint.Load:               rootalias.C
Rint.Logon:              rootlogon.C
Rint.Logoff:             rootlogoff.C
# Record session commands, set to "-" to turn off command recording
Rint.History:            $(HOME)/.root_hist

# ACLiC customization.
# ACLiC.Linkdef specifies the suffix that will be added to the script name to
# try to locate a custom linkdef file when generating the dictionary.
ACLiC.Linkdef:          _linkdef
# Set a top directory for storing the libraries produced by ACLiC
#ACLiC.BuildDir:        /where/I/would/like/my/compiled/scripts
# Add additional include directives for ACLiC compilations
#ACLiC.IncludePaths:     -I/where/the/includes/are

# Variables related to remote authentication
# Default authentication method for rootd (0=UsrPwd, 1=SRP, 2=Krb5, 3=Globus,
# 4=SSH, 5=UidGid)
Rootd.Authentication:   0

# Default authentication method for proofd (0=UsrPwd, 1=SRP, 2=Krb5, 3=Globus,
# 4=SSH, 5=UidGid)
Proofd.Authentication:  0
Proofd.StaticSlaves:    yes
Proofd.SendSRPPwd:      0

# Default login name (if not defined is taken from $(HOME))
# UsrPwd.Login:           qwerty
# SRP.Login:              qwerty
# Krb5.Login:             qwerty@LOCAL.DOM.AIN
# Globus.Login:           cd:~/.globus cf:usercert.pem  kf:userkey.pem  ad:/etc/grid-security/certificates
# SSH.Login:              qwerty
# UidGid.Login:           qwerty

# To be prompted for login information
# UsrPwd.LoginPrompt:     yes
# SRP.LoginPrompt:        yes
# Krb5.LoginPrompt:       yes
# Globus.LoginPrompt:     yes
# SSH.LoginPrompt:        yes
# UidGid.LoginPrompt:     yes

# To reuse established security context
UsrPwd.ReUse:         yes
SRP.ReUse:            no
Krb5.ReUse:           no
Globus.ReUse:         yes
SSH.ReUse:            yes

# To control password encryption for UsrPwd authentication
# (secure, but slightly slower)
UsrPwd.Crypt:         yes

# Globus miscellanea
# Globus Proxy duration: HH:MM (ex 12:15 for 12 hours and 15 min)
# 'default' for system default
Globus.ProxyDuration:    default
# Globus.ProxyDuration:    14
# Number of bits for the initial key
Globus.ProxyKeyBits:     1024

# Path to alternative 'ssh' (to override $PATH if ever needed)
# SSH.ExecDir:      /usr/bin

# Plugin library handlers
Plugin.TFile:        ^rfio:    TRFIOFile     RFIO    "TRFIOFile(const char*,Option_t*,const char*,Int_t)"
+Plugin.TFile:       ^castor:  TCastorFile   RFIO    "TCastorFile(const char*,Option_t*,const char*,Int_t,Int_t)"
+Plugin.TFile:       ^dcache:  TDCacheFile   DCache  "TDCacheFile(const char*,Option_t*,const char*,Int_t)"
+Plugin.TFile:       ^chirp:   TChirpFile    Chirp   "TChirpFile(const char*,Option_t*,const char*,Int_t)"
+Plugin.TFile:       ^alien:   TAlienFile    RAliEn  "TAlienFile(const char*,Option_t*,const char*,Int_t)"
Plugin.TSystem:      ^rfio:    TRFIOSystem   RFIO    "TRFIOSystem()"
+Plugin.TSystem:     ^alien:   TAlienSystem  RAliEn  "TAlienSystem()"
Plugin.TSQLServer:   ^mysql:   TMySQLServer  MySQL   "TMySQLServer(const char*,const char*,const char*)"
+Plugin.TSQLServer:  ^pgsql:   TPgSQLServer  PgSQL   "TPgSQLServer(const char*,const char*,const char*)"
+Plugin.TSQLServer:  ^sapdb:   TSapDBServer  SapDB   "TSapDBServer(const char*,const char*,const char*)"
+Plugin.TSQLServer:  ^oracle:  TOracleServer Oracle  "TOracleServer(const char*,const char*,const char*)"
Plugin.TGrid:        ^alien    TAlien        RAliEn  "TAlien(const char*,const char*,const char*,const char*)"
Plugin.TVirtualPad:         *  TPad          Gpad         "TPad()"
Plugin.TVirtualHistPainter: *  THistPainter  HistPainter  "THistPainter()"
Plugin.TVirtualTreePlayer:  *  TTreePlayer   TreePlayer   "TTreePlayer()"
Plugin.TVirtualTreeViewer:  *  TTreeViewer   TreeViewer   "TTreeViewer(const TTree*)"
Plugin.TVirtualGeoPainter:  *  TGeoPainter   GeomPainter  "TGeoPainter()"
Plugin.TVirtualUtil3D:      *  TUtil3D       Graf3d       "TUtil3D()"
Plugin.TVirtualUtilHist:    *  TUtilHist     Hist         "TUtilHist()"
Plugin.TVirtualUtilPad:     *  TUtilPad      Gpad         "TUtilPad()"
Plugin.TVirtualFitter:  Minuit TFitter       Minuit       "TFitter(Int_t)"
+Plugin.TVirtualFitter: Fumili TFumili       Fumili       "TFumili(Int_t)"
Plugin.TVirtualPS:      ps     TPostScript   Postscript   "TPostScript()"
+Plugin.TVirtualPS:     svg    TSVG          Postscript   "TSVG()"
Plugin.TViewerX3D:      x11    TViewerX3D    X3d          "TViewerX3D(TVirtualPad*,Option_t*,const char*,UInt_t,UInt_t)"
+Plugin.TViewerX3D:     qt     TQtViewerX3D  QtX3d        "TQtViewerX3D(TVirtualPad*,Option_t*,const char*,UInt_t,UInt_t)"
Plugin.TMinuitGraph:        *  TGraph        Graf         "TGraph(Int_t,const Double_t*,const Double_t*)"
Plugin.TPaletteEditor:      *  TASPaletteEditor  ASImage  "TASPaletteEditor(TAttImage*,UInt_t,UInt_t)"
Plugin.TImage:              *  TASImage          ASImage  "TASImage()"
Plugin.TFileDrawMap         *  TFileDrawMap  TreePlayer   "TFileDrawMap(const TFile*, const char*, const char*)"
Plugin.TVirtualX:    x11       TGX11         GX11         "TGX11(const char*,const char*)"
+Plugin.TVirtualX:   x11ttf    TGX11TTF      GX11TTF      "TGX11TTF()"
+Plugin.TVirtualX:   win32     TGWin32       Win32        "TGWin32(const char*,const char*)"
+Plugin.TVirtualX:   win32gdk  TGWin32       Win32gdk     "TGWin32(const char*,const char*)"
+Plugin.TVirtualX:   qt        TGQt          GQt          "TGQt(const char*,const char*)"
+Plugin.TVirtualX:   qtwin32   TQtThread     GQt          "TQtThread(const char*,const char*)"
Plugin.TGuiFactory:  root      TRootGuiFactory Gui        "TRootGuiFactory()"
+Plugin.TGuiFactory: win32     TWin32GuiFactory Win32     "TWin32GuiFactory()"
+Plugin.TGuiFactory: qt        TQtRootGuiFactory QtRoot   "TQtRootGuiFactory()"
Plugin.TVirtualProof:        * TProof        Proof        "TProof(const char*,const char*,const char*,Int_t)"
Plugin.TProofProgressDialog: * TProofProgressDialog ProofGui  "TProofProgressDialog(TVirtualProof*,const char*,Int_t,Long64_t,Long64_t)"

# Example of custom setting for the Rint application (root.exe).
# This overrides the default specified above for a generic application.
# Color 5 is yellow.
Rint.Canvas.HighLightColor:      5
