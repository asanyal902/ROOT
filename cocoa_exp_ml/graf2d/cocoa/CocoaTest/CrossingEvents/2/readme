Leave/Enter notify events without grabs.

test1.gui:

The pointer moves from window A to window B and A is an inferior of B:

-LeaveNotify with detail Ancestor is generated on A
-LeaveNotify with detail Virtual is generated on each window between A and B exclusive (in that order)
-EnterNotify with detail Inferior is generated on B

The pointer moves from window A to window B and B is an inferior of A:
-LeaveNotify with detail Inferior is generated on A
-EnterNotify with detail Virtual is generated on each window between
 A and B exclusive (in that order) 
-EnterNotify with detail Ancestor is generated on B.

Note: the second case, the second sentence "(in that order)" is different in TGCocoa - it's in reverse order.

GUI: one main window with several nested windows, pointer must go from some of nested windows
to it's parents:

main window 500, 500, 600, 600
|
child window 100, 100, 400, 400
  |
child window 50, 50, 350, 300
   |
child window 25, 25, 325, 250

Expected output - messages from TestFrame::HandleCrossing, with event types and coordinates (use window geometry
to visually check, if coordinates are OK).

Compare Cocoa/X11 versions, compare coordinates.


test2.gui:
test3.gui:

When the pointer moves from window A to window B and window C is their least common ancestor:

-LeaveNotify with detail Nonlinear is generated on A
-LeaveNotify with detail NonlinearVirtual is generated on each window between A and C exclusive (in that order)
-EnterNotify with detail NonlinearVirtual is generated on each window between C and B exclusive (in that order)
-EnterNotify with detail Nonlinear is generated on B.

test2.gui is an example with one top-level window (and special window structure inside to check how common ancestor found)

test3.gui is an example with two top-level windows.