#! /bin/sh

# Simple configure script.
#
# Authors: Christian Holm Christensen and Fons Rademakers


ARCHS=config/ARCHS
MAKEIN=config/Makefile.in
MAKEOUT=config/Makefile.config
CONFIN=config/config.in
CONFOUT=include/config.h
RCONFIN=config/root-config.in
RCONFOUT=bin/root-config
ROOTRCIN=config/rootrc.in
ROOTRCOUT=system.rootrc
TMAKEIN=test/Makefile.in
TMAKEOUT=test/Makefile


if (echo "testing\c"; echo 1,2,3) | grep c >/dev/null; then
  if (echo -n testing; echo 1,2,3) | sed s/-n/xn/ | grep xn >/dev/null; then
    ac_n= ac_c='
' ac_t='	'
  else
    ac_n=-n ac_c= ac_t=
  fi
else
  ac_n= ac_c='\c' ac_t=
fi


confhelp() {
    echo "Usage:     $0 <architecture> [flag=value] "
    echo ""
    echo "    FLAG           DESCRIPTION              DEFAULT"
    echo "    --prefix       Installation prefix      (/usr/local)"
    echo "    --bindir       Binary installation dir  (<prefix>/bin)"
    echo "    --libdir       Library installation dir (<prefix>/lib/root)"
    echo "    --incdir       Header installation dir  (<prefix>/include/root)"
    echo "    --etcdir       Config installation dir  (/etc/root)"
    echo "    --datadir      Data installation dir    (<prefix>/share/root)"
    echo "    --macrodir     Macro installation dir   (<datadir>/macros)"
    echo "    --cintincdir   CINT interpeted headers  (<datadir>/cint)"
    echo "    --iconpath     Icon installation dir    (<datadir>/icons)"
    echo "    --srcdir       Sources installation dir (<datadir>/src)"
    echo "    --docdir       Documentation            (<prefix>/doc)"
    echo "    --testdir      Tests                    (<prefix>/doc/root/test)"
    echo "    --tutdir       Tutorials                (<prefix>/doc/root/tutorial)"
    echo ""
    echo "    --with-xpm           XPM support, path of libXpm.a"
    echo "    --with-ttf-incdir    TTF support, location of freetype.h"
    echo "    --with-ttf-libdir    TTF support, location of libttf.so"
    echo "    --with-ttf-fontdir   TTF support, location of TTF fonts"
    echo "    --with-opengl-incdir OpenGL support, location of gl.h"
    echo "    --with-opengl-libdir OpenGL support, location of libMesaGL.so"
    echo "    --with-cern-libdir   HBOOK converter, location of CERN libs dir"
    echo "    --with-rfio          RFIO support, path of libshift.a"
    echo "    --with-thread        Thread support, path of libpthread.so"
    echo "    --with-mysql-incdir  MySQL support, location of mysql.h"
    echo "    --with-mysql-libdir  MySQL support, location of libmysqlclient.so"
    echo "    --with-srp           Secure Remote Passwd support, location of SRP distribution"
    echo "    --with-afs           AFS support, location of AFS distribution"
    echo "    --with-pythia        PYHTIA support, path of libPythia.so"
    echo "    --with-pythia6       PYHTIA6 support, path of libPythia6.so"
    echo "    --with-venus         VENUS support, path of libVenus.so"
    echo "    --with-sys-iconpath  Extra icon path"
    echo ""
    cat config/ARCHS
}

if [ $# -lt 1 ] ; then
   echo "You must give architecture as first argument - try $0 --help"
   exit 1
else
   case $1 in
   -h|--help) confhelp ; exit 0 ;;
   *) if `grep "^$1 " $ARCHS >/dev/null 2>&1` ; then
         arch=$1
         echo "Configuring for $arch"
         shift
      else
         echo "Invalid architecture. Try $0 --help"
         exit 1
      fi
      ;;
   esac
fi

trap "rm -f Makefile.tmp config.tmp root-config.tmp TMakefile.tmp rootrc.tmp; \
      exit 1" 1 2 3 15

cp -f $MAKEIN Makefile.tmp
cp -f $CONFIN config.tmp
cp -f $RCONFIN root-config.tmp
cp -f $TMAKEIN TMakefile.tmp
cp -f $ROOTRCIN rootrc.tmp

if [ $# -gt 0 ] ; then
   while [ "$1" != "" ] ; do
      case "$1" in
      -*=*) optarg=`echo "$1" | sed 's/[-_a-zA-Z0-9]*=//'` ;;
      *) optarg= ;;
      esac

      case $1 in
      --help|-h) confhelp ;   exit 0 ;;
      --with-xpm=*)           xpmlib=$optarg        ;;
      --with-ttf-incdir=*)    ttfincdir=$optarg     ;;
      --with-ttf-libdir=*)    ttflibdir=$optarg     ;;
      --with-ttf-fontdir=*)   ttffontdir=$optarg    ;;
      --with-opengl-incdir=*) openglincdir=$optarg  ;;
      --with-opengl-libdir=*) opengllibdir=$optarg  ;;
      --with-cern-libdir=*)   cernlibdir=$optarg    ;;
      --with-rfio=*)          rfio=$optarg          ;;
      --with-thread=*)        thread=$optarg        ;;
      --with-mysql-incdir=*)  mysqlincdir=$optarg   ;;
      --with-mysql-libdir=*)  mysqllibdir=$optarg   ;;
      --with-srp=*)           srpdir=$optarg        ;;
      --with-afs=*)           afsdir=$optarg        ;;
      --with-pythia=*)        pythialib=$optarg     ;;
      --with-pythia6=*)       pythia6lib=$optarg    ;;
      --with-venus=*)         venuslib=$optarg      ;;
      --with-sys-iconpath=*)  extraiconpath=$optarg ;;
      --prefix*)      haveconfig=-DHAVE_CONFIG ; prefix=$optarg      ;;
      --bindir=*)     haveconfig=-DHAVE_CONFIG ; bindir=$optarg      ;;
      --libdir=*)     haveconfig=-DHAVE_CONFIG ; libdir=$optarg      ;;
      --incdir=*)     haveconfig=-DHAVE_CONFIG ; incdir=$optarg      ;;
      --etcdir=*)     haveconfig=-DHAVE_CONFIG ; etcdir=$optarg      ;;
      --datadir=*)    haveconfig=-DHAVE_CONFIG ; datadir=$optarg     ;;
      --macrodir=*)   haveconfig=-DHAVE_CONFIG ; macrodir=$optarg    ;;
      --cintincdir=*) haveconfig=-DHAVE_CONFIG ; cintincdir=$optarg  ;;
      --iconpath=*)   haveconfig=-DHAVE_CONFIG ; iconpath=$optarg    ;;
      --srcdir=*)     haveconfig=-DHAVE_CONFIG ; srcdir=$optarg      ;;
      --docdir=*)     haveconfig=-DHAVE_CONFIG ; docdir=$optarg      ;;
      --testdir=*)    haveconfig=-DHAVE_CONFIG ; testdir=$optarg     ;;
      --tutdir=*)     haveconfig=-DHAVE_CONFIG ; tutdir=$optarg      ;;
      *)  echo "Invalid option. Try $0 --help" ; exit 1 ;;
      esac
      shift
   done
fi

# Check for MySQL include and library
echo $ac_n "Checking for mysql.h... $ac_c"
mysqlincdirs="$MYSQL $MYSQL/include /usr/include /usr/local/include \
              /usr/include/mysql /usr/local/include/mysql /usr/mysql/include \
              /usr/local/mysql/include /usr/mysql /usr/local/mysql /opt/mysql \
              /opt/mysql/include"

if [ -z "$mysqlincdir" ]; then
   mysqlincdir=NO
   if [ "$MYSQL" != "NO" ]; then
      for i in $mysqlincdirs; do
         for j in mysql.h; do
            if [ -r "$i/$j" ]; then
               mysqlincdir=$i
               break 2
            fi
         done
      done
   fi
fi
echo $mysqlincdir

echo $ac_n "Checking for libmysqlclient.a... $ac_c"
mysqllibdirs="$MYSQL $MYSQL/lib /usr/lib /usr/local/lib /usr/lib/mysql \
              /usr/local/lib/mysql /usr/mysql/lib /usr/local/mysql/lib \
              /usr/mysql /usr/local/mysql /opt/mysql /opt/mysql/lib"

if [ -z "$mysqllibdir" ]; then
   mysqllibdir=NO
   if [ "$MYSQL" != "NO" ]; then
      for i in $mysqllibdirs; do
         for j in libmysqlclient.a; do
            if [ -r "$i/$j" ]; then
               mysqllibdir=$i
               break 2
            fi
         done
      done
   fi
fi
echo $mysqllibdir

# Check for FreeType TTF include, library and fonts
echo $ac_n "Checking for freetype.h... $ac_c"
ttfincdirs="$TTF $TTF/include /usr/include /usr/local/include \
              /usr/include/freetype /usr/local/include/freetype \
              /usr/freetype/include /usr/local/freetype/include \
              /usr/freetype /usr/local/freetype /opt/freetype \
              /opt/freetype/include"

if [ -z "$ttfincdir" ]; then
   ttfincdir=NO
   if [ "$TTF" != "NO" ]; then
      for i in $ttfincdirs; do
         for j in freetype.h; do
            if [ -r "$i/$j" ]; then
               ttfincdir=$i
               break 2
            fi
         done
      done
   fi
fi
echo $ttfincdir

echo $ac_n "Checking for libttf.a... $ac_c"
ttflibdirs="$TTF $TTF/lib /usr/lib /usr/local/lib /usr/lib/freetype \
              /usr/local/lib/freetype /usr/freetype/lib \
              /usr/local/freetype/lib /usr/freetype /usr/local/freetype \
              /opt/freetype /opt/freetype/lib"

if [ -z "$ttflibdir" ]; then
   ttflibdir=NO
   if [ "$TTF" != "NO" ]; then
      for i in $ttflibdirs; do
         for j in libttf.a; do
            if [ -r "$i/$j" ]; then
               ttflibdir=$i
               break 2
            fi
         done
      done
   fi
fi
echo $ttflibdir

echo $ac_n "Checking for ttf fonts (arial.ttf)... $ac_c"
ttffontdirs="$TTF $TTF/fonts /usr/lib/X11/fonts /usr/lib/X11/fonts/ttf \
              /usr/share /usr/share/fonts /usr/share/fonts/ttf \
              /usr/share/ttf /usr/local/share /usr/local/share/fonts \
              /usr/local/share/fonts/ttf /usr/local/share/ttf
              /opt/fonts /opt/fonts/ttf /opt/ttf"

if [ -z "$ttffontdir" ]; then
   ttffontdir=NO
   if [ "$TTF" != "NO" ]; then
      for i in $ttffontdirs; do
         for j in arial.ttf; do
            if [ -r "$i/$j" ]; then
               ttffontdir=$i
               break 2
            fi
         done
      done
   fi
fi
echo $ttffontdir

# Check for Mesa OpenGL compatible include and library
echo $ac_n "Checking for GL/gl.h... $ac_c"
openglincdirs="$OPENGL $OPENGL/include /usr/include /usr/local/include \
              /usr/include/Mesa /usr/local/include/Mesa /usr/Mesa/include \
              /usr/local/Mesa/include /usr/Mesa /usr/local/Mesa /opt/Mesa \
              /opt/Mesa/include"

if [ -z "$openglincdir" ]; then
   openglincdir=NO
   if [ "$OPENGL" != "NO" ]; then
      for i in $openglincdirs; do
         for j in GL/gl.h; do
            if [ -r "$i/$j" ]; then
               openglincdir=$i
               break 2
            fi
         done
      done
   fi
fi
echo $openglincdir

echo $ac_n "Checking for libGL... $ac_c"
opengllibdirs="$OPENGL $OPENGL/lib /usr/lib /usr/local/lib /usr/lib/X11 \
              /usr/X11R6/lib /usr/local/lib/X11 /usr/local/X11R6/lib \
              /usr/X11/lib /usr/lib/Mesa /usr/local/lib/Mesa /usr/Mesa/lib \
              /usr/local/Mesa/lib /usr/Mesa /usr/local/Mesa /opt/Mesa \
              /opt/Mesa/lib"
opengllibs="libGL.a libGL.so"    # favour .a over .so
opengllib=NO

if [ -z "$opengllibdir" ]; then
   if [ "$OPENGL" != "NO" ]; then
      for i in $opengllibdirs; do
         for j in $opengllibs; do
            if [ -r "$i/$j" ]; then
               opengllib=$i/$j
               break 2
            fi
         done
      done
   fi
else
   for j in $opengllibs; do
      if [ -r "$opengllibdir/$j" ]; then
         opengllib=$opengllibdir/$j
         break 1
      fi
   done
fi
echo $opengllib

echo $ac_n "Checking for libGLU... $ac_c"
openglulibs="libGLU.a libGLU.so"    # favour .a over .so
openglulib=NO

if [ -z "$opengllibdir" ]; then
   if [ "$OPENGL" != "NO" ]; then
      for i in $opengllibdirs; do
         for j in $openglulibs; do
            if [ -r "$i/$j" ]; then
               openglulib=$i/$j
               break 2
            fi
         done
      done
   fi
else
   for j in $openglulibs; do
      if [ -r "$opengllibdir/$j" ]; then
         openglulib=$opengllibdir/$j
         break 1
      fi
   done
fi
echo $openglulib

# Check for Xpm library
echo $ac_n "Checking for libXpm.a... $ac_c"
xpmlibdirs="$XPM $XPM/lib /usr/lib /usr/local/lib \
              /usr/lib/X11 /usr/local/lib/X11 /usr/X11R6/lib \
              /use/local/X11R6/lib /usr/X11/lib"

if [ -z "$xpmlib" ]; then
   xpmlib=NO
   for i in $xpmlibdirs; do
      for j in libXpm.a; do
         if [ -r "$i/$j" ]; then
            xpmlib=$i/$j
            break 2
         fi
      done
   done
fi
echo $xpmlib

# Check for SRP (libsrp.a)
echo $ac_n "Checking for SRP (libsrp.a)... $ac_c"
srpdirs="$SRP /usr/srp /usr/local/srp"

if [ -z "$srpdir" ]; then
   srpdir=NO
   if [ "$SRP" != "NO" ]; then
      for i in $srpdirs; do
         for j in lib/libsrp.a; do
            if [ -r "$i/$j" ]; then
               srpdir=$i
               break 2
            fi
         done
      done
   fi
fi
echo $srpdir

# Check for AFS (libdes.a)
echo $ac_n "Checking for AFS (libdes.a)... $ac_c"
afsdirs="$AFS /usr/afsws /usr/local/afsws"

if [ -z "$afsdir" ]; then
   afsdir=NO
   if [ "$AFS" != "NO" ]; then
      for i in $afsdirs; do
         for j in lib/libdes.a; do
            if [ -r "$i/$j" ]; then
               afsdir=$i
               break 2
            fi
         done
      done
   fi
fi
echo $afsdir

# Check for libshift.a
echo $ac_n "Checking for libshift.a... $ac_c"
rfios="$RFIO /cern/pro/lib/libshift.a /cern/new/lib/libshift.a \
       /cern/old/lib/libshift.a"

if [ -z "$rfio" ]; then
   rfio=NO
   for i in $rfios; do
      if [ -r "$i" ]; then
         rfio=$i
         break 1
      fi
   done
fi
if [ "$rfio" != "NO" ]; then
   case $arch in
      linux*) rfio="$rfio -lnsl" ;;
   esac
fi
echo $rfio

# Check for CERN libs (libpacklib and libkernlib)
echo $ac_n "Checking for libpacklib... $ac_c"
cernlibdirs="$CERNLIB $CERNLIB/lib /cern/pro/lib /cern/old/lib /cern/new/lib"
packlibs="libpacklib.a libpacklib.so libpacklib.sl packlib.lib"

if [ -z "$cernlibdir" ]; then
   cernlibdir=NO
   for i in $cernlibdirs; do
      for j in $packlibs; do
         if [ -r "$i/$j" ]; then
            cernlibdir=$i
            break 2
         fi
      done
   done
fi
echo $cernlibdir

# Check for libPythia
echo $ac_n "Checking for libPythia... $ac_c"
pythialibdirs="$PYTHIA $PYTHIA/lib /cern/pro/lib"
pythialibs="libPythia.so libPythia.sl libPythia.a libPythia.lib"

if [ -z "$pythialib" ]; then
   pythialib=NO
   for i in $pythialibdirs; do
      for j in $pythialibs; do
         if [ -r "$i/$j" ]; then
            pythialib=$i/$j
            break 2
         fi
      done
   done
fi
echo $pythialib

# Check for libPythia6
echo $ac_n "Checking for libPythia6... $ac_c"
pythia6libdirs="$PYTHIA6 $PYTHIA6/lib /cern/pro/lib"
pythia6libs="libPythia6.so libPythia6.sl libPythia6.a libPythia6.lib"

if [ -z "$pythia6lib" ]; then
   pythia6lib=NO
   for i in $pythia6libdirs; do
      for j in $pythia6libs; do
         if [ -r "$i/$j" ]; then
            pythia6lib=$i/$j
            break 2
         fi
      done
   done
fi
echo $pythia6lib

# Check for libVenus
echo $ac_n "Checking for libVenus... $ac_c"
venuslibdirs="$VENUS $VENUS/lib /cern/pro/lib"
venuslibs="libVenus.so libVenus.sl libVenus.a libVenus.lib"

if [ -z "$venuslib" ]; then
   venuslib=NO
   for i in $venuslibdirs; do
      for j in $venuslibs; do
         if [ -r "$i/$j" ]; then
            venuslib=$i/$j
            break 2
         fi
      done
   done
fi
echo $venuslib

# On win32 we always have OpenGL available (is this true?)
if [ "$arch" = "win32" ]; then
   openglincdir=include
fi

# Create needed directories
if [ ! -d include ]; then
   echo $ac_n "Creating include ... $ac_c"
   mkdir include
   echo "done"
fi
if [ ! -d bin ]; then
    echo $ac_n "Creating bin ... $ac_c"
    mkdir bin
    echo "done"
fi
if [ ! -d lib ]; then
    echo $ac_n "Creating lib ... $ac_c"
    mkdir lib
    echo "done"
fi

# Cleanup obsolete links
if [ -h opengl ]; then
   rm -f opengl
fi
if [ -h ttf ]; then
   rm -f ttf
fi

if [ -n "$haveconfig" ] ; then
    if [ -z "$prefix" ] ;       then prefix=/usr/local ; fi
    if [ -z "$bindir" ] ;       then bindir=$prefix/bin ; fi
    if [ -z "$libdir" ] ;       then libdir=$prefix/lib/root ; fi
    if [ -z "$incdir" ] ;       then incdir=$prefix/include/root ; fi
    if [ -z "$etcdir" ] ;       then etcdir=/etc/root ; fi
    if [ -z "$datadir" ] ;      then datadir=$prefix/share/root ; fi
    if [ -z "$macrodir" ] ;     then macrodir=$datadir/macros ; fi
    if [ -z "$cintincdir" ] ;   then cintincdir=$datadir/cint; fi
    if [ -z "$iconpath" ] ;     then iconpath=$datadir/icons ; fi
    if [ -z "$srcdir" ] ;       then srcdir=$datadir/src ; fi
    if [ -z "$ttflibdir" ] ;    then ttflibdir=$libdir ; fi
    if [ -z "$ttffontdir" ] ;   then ttffontdir=$datadir/fonts ; fi
    if [ -z "$docdir" ] ;       then docdir=$prefix/doc ; fi
    if [ -z "$testdir" ] ;      then testdir=$docdir/root/test ; fi
    if [ -z "$tutdir" ] ;       then tutdir=$docdir/root/tutorials ; fi

    if [ "$xpmlib" = "NO" ]; then unset xpmlib ; fi
    if [ "$ttfincdir" = "NO" ]; then unset ttfincdir ; fi
    if [ "$ttflibdir" = "NO" ]; then unset ttflibdir ; fi
    if [ "$ttffontdir" = "NO" ]; then unset ttffontdir ; fi
    if [ "$openglincdir" = "NO" ]; then unset openglincdir ; fi
    if [ "$opengllib" = "NO" ]; then unset opengllib ; fi
    if [ "$openglulib" = "NO" ]; then unset openglulib ; fi
    if [ "$cernlibdir" = "NO" ]; then unset cernlibdir ; fi
    if [ "$rfio" = "NO" ]; then unset rfio ; fi
    if [ "$mysqlincdir" = "NO" ]; then unset mysqlincdir ; fi
    if [ "$mysqllibdir" = "NO" ]; then unset mysqllibdir ; fi
    if [ "$srpdir" = "NO" ]; then unset srpdir ; fi
    if [ "$afsdir" = "NO" ]; then unset afsdir ; fi
    if [ "$pythialib" = "NO" ]; then unset pythialib ; fi
    if [ "$pythia6lib" = "NO" ]; then unset pythia6lib ; fi
    if [ "$venuslib" = "NO" ]; then unset venuslib ; fi
    if [ -z "$thread" ] && [ -n "$THREAD" ]; then thread="$THREAD" ; fi

    sed -e "s|@useconfig@|TRUE|"                       \
        -e "s|@cflags|-DHAVE_CONFIG|"                  \
        -e "s|@ldflags@|-Wl,-rpath,$libdir @ldflags@|" \
        < Makefile.tmp > Makefile.tmpp
    mv Makefile.tmpp Makefile.tmp

else
    prefix=\$\(ROOTSYS\)
    bindir=\$\(ROOTSYS\)/bin
    libdir=\$\(ROOTSYS\)/lib
    incdir=\$\(ROOTSYS\)/include
    etcdir=\$\(ROOTSYS\)
    datadir=\$\(ROOTSYS\)
    macrodir=\$\(ROOTSYS\)/macros
    cintincdir=\$\(ROOTSYS\)/cint
    iconpath=\$\(ROOTSYS\)/icons
    srcdir=\$\(ROOTSYS\)/src
    docdir=\$\(ROOTSYS\)
    testdir=\$\(ROOTSYS\)/test
    tutdir=\$\(ROOTSYS\)/tutorials

    if [ "$xpmlib" = "NO" ]; then unset xpmlib ; fi
    if [ "$ttfincdir" = "NO" ]; then unset ttfincdir ; fi
    if [ "$ttflibdir" = "NO" ]; then unset ttflibdir ; fi
    if [ "$ttffontdir" = "NO" ]; then unset ttffontdir ; fi
    if [ "$openglincdir" = "NO" ]; then unset openglincdir ; fi
    if [ "$opengllib" = "NO" ]; then unset opengllib ; fi
    if [ "$openglulib" = "NO" ]; then unset openglulib ; fi
    if [ "$cernlibdir" = "NO" ]; then unset cernlibdir ; fi
    if [ "$rfio" = "NO" ]; then unset rfio ; fi
    if [ "$mysqlincdir" = "NO" ]; then unset mysqlincdir ; fi
    if [ "$mysqllibdir" = "NO" ]; then unset mysqllibdir ; fi
    if [ "$srpdir" = "NO" ]; then unset srpdir ; fi
    if [ "$afsdir" = "NO" ]; then unset afsdir ; fi
    if [ "$pythialib" = "NO" ]; then unset pythialib ; fi
    if [ "$pythia6lib" = "NO" ]; then unset pythia6lib ; fi
    if [ "$venuslib" = "NO" ]; then unset venuslib ; fi
    if [ -z "$thread" ] && [ -n "$THREAD" ]; then thread="$THREAD" ; fi

    sed -e "s|@useconfig@|FALSE|" \
        -e "s|@cflags||"          \
        -e "s|@ldflags@||"        \
        < Makefile.tmp > Makefile.tmpp
    mv Makefile.tmpp Makefile.tmp
fi

echo $ac_n "Writing $MAKEOUT ... $ac_c"
sed -e "s|@architecture@|$arch|"         \
    -e "s|@ldflags@|-L$libdir|"          \
    -e "s|@bindir@|$bindir|"             \
    -e "s|@libdir@|$libdir|"             \
    -e "s|@incdir@|$incdir|"             \
    -e "s|@etcdir@|$etcdir|"             \
    -e "s|@datadir@|$datadir|"           \
    -e "s|@macrodir@|$macrodir|"         \
    -e "s|@cintincdir@|$cintincdir|"     \
    -e "s|@iconpath@|$iconpath|"         \
    -e "s|@srcdir@|$srcdir|"             \
    -e "s|@xpmlib@|$xpmlib|"             \
    -e "s|@ttflibdir@|$ttflibdir|"       \
    -e "s|@ttffontdir@|$ttffontdir|"     \
    -e "s|@ttfincdir@|$ttfincdir|"       \
    -e "s|@openglulib@|$openglulib|" \
    -e "s|@opengllib@|$opengllib|" \
    -e "s|@openglincdir@|$openglincdir|" \
    -e "s|@cernlibdir@|$cernlibdir|"     \
    -e "s|@rfio@|$rfio|"                 \
    -e "s|@thread@|$thread|"             \
    -e "s|@mysqlincdir@|$mysqlincdir|"   \
    -e "s|@mysqllibdir@|$mysqllibdir|"   \
    -e "s|@srpdir@|$srpdir|"             \
    -e "s|@afsdir@|$afsdir|"             \
    -e "s|@pythialib@|$pythialib|"       \
    -e "s|@pythia6lib@|$pythia6lib|"     \
    -e "s|@venuslib@|$venuslib|"         \
    -e "s|@docdir@|$docdir|"             \
    -e "s|@testdir@|$testdir|"           \
    -e "s|@tutdir@|$tutdir|"             \
    < Makefile.tmp > $MAKEOUT
rm -f Makefile.tmp
echo "done"

echo $ac_n "Writing $TMAKEOUT ... $ac_c"
sed -e "s|@architecture@|$arch|"         \
    < TMakefile.tmp > $TMAKEOUT
rm -f TMakefile.tmp
echo "done"

echo $ac_n "Writing $CONFOUT ... $ac_c"
sed -e "s|@architecture@|$arch|"           \
    -e "s|@prefix@|$prefix|"               \
    -e "s|@bindir@|$bindir|"               \
    -e "s|@libdir@|$libdir|"               \
    -e "s|@incdir@|$incdir|"               \
    -e "s|@etcdir@|$etcdir|"               \
    -e "s|@datadir@|$datadir|"             \
    -e "s|@macrodir@|$macrodir|"           \
    -e "s|@cintincdir@|$cintincdir|"       \
    -e "s|@iconpath@|$iconpath|"           \
    -e "s|@srcdir@|$srcdir|"               \
    -e "s|@ttffontdir@|$ttffontdir|"       \
    -e "s|@ttflibdir@|$ttflibdir|"         \
    -e "s|@extraiconpath@|$extraiconpath|" \
    < config.tmp > $CONFOUT
rm -f config.tmp
echo "done"

echo $ac_n "Writing $RCONFOUT ... $ac_c"
prefix2=$prefix
if [ "$prefix2" = "\$(ROOTSYS)" ]; then
   prefix2=\$ROOTSYS
fi
sed -e "s|@architecture@|$arch|"           \
    -e "s|@prefix@|$prefix2|"              \
   < root-config.tmp > $RCONFOUT
rm -f root-config.tmp
chmod 755 $RCONFOUT
echo "done"

echo $ac_n "Writing $ROOTRCOUT ... $ac_c"
if [ "$ttffontdir" = "$HOME/ttf" ]; then
   ttffontdir=\$\(HOME\)/ttf
fi
if [ "$ttffontdir" = "$HOME/ttf/fonts" ]; then
   ttffontdir=\$\(HOME\)/ttf/fonts
fi
sed -e "s|@libdir@|$libdir|"               \
    -e "s|@macrodir@|$macrodir|"           \
    -e "s|@bindir@|$bindir|"               \
    -e "s|@ttffontdir@|$ttffontdir|"       \
    -e "s|@iconpath@|$iconpath|"           \
   < rootrc.tmp > $ROOTRCOUT
rm -f rootrc.tmp
echo "done"

# On win32 convert all files in tutorials and test to \r\n convention
# (only if CVS directory does not exist, otherwise cvs will already have
# made the conversion).
if [ "$arch" = "win32" ] && [ ! -d CVS ]; then
   echo $ac_n "Converting files in tutorials and test to DOS format ... $ac_c"
   for i in tutorials/*.C tutorials/*.sql test/*.cxx test/*.h \
            test/Makefile* test/README system.rootrc
   do
      sed 's/$//' $i > r__tmp
      touch -r $i r__tmp
      mv -f r__tmp $i
   done
   echo "done"
fi

echo ""
if [ -z "$ttfincdir" ] || [ -z "$openglincdir" ]; then
   if [ -z "$ttfincdir" ] && [ "$arch" != "win32" ]; then
      echo "To build the ROOT TrueType font add-on library see README/INSTALL."
   fi
   if [ -z "$openglincdir" ]; then
      echo "To build the ROOT OpenGL add-on library see README/INSTALL."
   fi
   echo ""
   echo ""
fi

# List the possible Makefiles
echo "To build ROOT type:"
echo ""
echo "   gmake"
echo "   gmake install"
echo ""

exit 0
