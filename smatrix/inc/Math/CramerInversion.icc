// @(#)root/smatrix:$Id: CramerInversion.icc,v 1.3 2006/02/17 16:11:02 moneta Exp $
// Authors: L. Moneta    2005  


/**********************************************************************
 *                                                                    *
 * Copyright (c) 2005 , LCG ROOT MathLib Team                         *
 *                                                                    *
 *                                                                    *
 **********************************************************************/
//
// Cramer optmized inversion for matrices up to size 6x6. 
// Code from ROOT TMatrixDCramerInv which originates from CLHEP 
// (original author Mark Fischler)
//

#ifndef ROOT_Math_CramerInversion_icc
#define ROOT_Math_CramerInversion_icc

#include <cmath>


namespace ROOT { 

  namespace Math { 



//==============================================================================
// Inversion for 3x3 matrices
//==============================================================================

/**
   Inversion for a 3x3 matrix
 */
template <class MatrixRep>
bool Inverter<3>::Dinv(MatrixRep & rhs) { 

  typedef typename MatrixRep::value_type Scalar; 

  // check matrix sizes ??

  //  Scalar * pM = rhs.Array();	

  const Scalar c00 = rhs[4] * rhs[8] - rhs[5] * rhs[7];
  const Scalar c01 = rhs[5] * rhs[6] - rhs[3] * rhs[8];
  const Scalar c02 = rhs[3] * rhs[7] - rhs[4] * rhs[6];
  const Scalar c10 = rhs[7] * rhs[2] - rhs[8] * rhs[1];
  const Scalar c11 = rhs[8] * rhs[0] - rhs[6] * rhs[2];
  const Scalar c12 = rhs[6] * rhs[1] - rhs[7] * rhs[0];
  const Scalar c20 = rhs[1] * rhs[5] - rhs[2] * rhs[4];
  const Scalar c21 = rhs[2] * rhs[3] - rhs[0] * rhs[5];
  const Scalar c22 = rhs[0] * rhs[4] - rhs[1] * rhs[3];

  const Scalar t0 = std::fabs(rhs[0]);
  const Scalar t1 = std::fabs(rhs[3]);
  const Scalar t2 = std::fabs(rhs[6]);
  Scalar det;
  Scalar tmp;
  if (t0 >= t1) {
    if (t2 >= t0) {
    tmp = rhs[6];
    det = c12*c01-c11*c02;
    } else {
      tmp = rhs[0];
      det = c11*c22-c12*c21;
    }
  } else if (t2 >= t1) {
    tmp = rhs[6];
    det = c12*c01-c11*c02;
  } else {
    tmp = rhs[3];
    det = c02*c21-c01*c22;
  }

  if ( det == 0 || tmp == 0) {
    return false; 
  }

  const Scalar s = tmp/det;

//   if (determ)
//     *determ = 1./s;

  rhs[0] = s*c00;
  rhs[1] = s*c10;
  rhs[2] = s*c20;
  rhs[3] = s*c01;
  rhs[4] = s*c11;
  rhs[5] = s*c21;
  rhs[6] = s*c02;
  rhs[7] = s*c12;
  rhs[8] = s*c22;
  
  return true;
}


//==============================================================================
// Inversion for 4x4 matrices
//==============================================================================
// Fij are indices for a 4x4 matrix.

#define F00 0
#define F01 1
#define F02 2
#define F03 3

#define F10 4
#define F11 5
#define F12 6
#define F13 7

#define F20 8
#define F21 9
#define F22 10
#define F23 11

#define F30 12
#define F31 13
#define F32 14
#define F33 15

/**
   Inversion for a 4x4 matrix
 */
template <class MatrixRep>
bool Inverter<4>::Dinv(MatrixRep & rhs) { 

  typedef typename MatrixRep::value_type Scalar; 

  // check matrix sizes ??

  //  Scalar * pM = rhs.Array();	

  // Find all NECESSARY 2x2 dets:  (18 of them)

  const Scalar det2_12_01 = rhs[F10]*rhs[F21] - rhs[F11]*rhs[F20];
  const Scalar det2_12_02 = rhs[F10]*rhs[F22] - rhs[F12]*rhs[F20];
  const Scalar det2_12_03 = rhs[F10]*rhs[F23] - rhs[F13]*rhs[F20];
  const Scalar det2_12_13 = rhs[F11]*rhs[F23] - rhs[F13]*rhs[F21];
  const Scalar det2_12_23 = rhs[F12]*rhs[F23] - rhs[F13]*rhs[F22];
  const Scalar det2_12_12 = rhs[F11]*rhs[F22] - rhs[F12]*rhs[F21];
  const Scalar det2_13_01 = rhs[F10]*rhs[F31] - rhs[F11]*rhs[F30];
  const Scalar det2_13_02 = rhs[F10]*rhs[F32] - rhs[F12]*rhs[F30];
  const Scalar det2_13_03 = rhs[F10]*rhs[F33] - rhs[F13]*rhs[F30];
  const Scalar det2_13_12 = rhs[F11]*rhs[F32] - rhs[F12]*rhs[F31];
  const Scalar det2_13_13 = rhs[F11]*rhs[F33] - rhs[F13]*rhs[F31];
  const Scalar det2_13_23 = rhs[F12]*rhs[F33] - rhs[F13]*rhs[F32];
  const Scalar det2_23_01 = rhs[F20]*rhs[F31] - rhs[F21]*rhs[F30];
  const Scalar det2_23_02 = rhs[F20]*rhs[F32] - rhs[F22]*rhs[F30];
  const Scalar det2_23_03 = rhs[F20]*rhs[F33] - rhs[F23]*rhs[F30];
  const Scalar det2_23_12 = rhs[F21]*rhs[F32] - rhs[F22]*rhs[F31];
  const Scalar det2_23_13 = rhs[F21]*rhs[F33] - rhs[F23]*rhs[F31];
  const Scalar det2_23_23 = rhs[F22]*rhs[F33] - rhs[F23]*rhs[F32];

  // Find all NECESSARY 3x3 dets:   (16 of them)

  const Scalar det3_012_012 = rhs[F00]*det2_12_12 - rhs[F01]*det2_12_02 
                                + rhs[F02]*det2_12_01;
  const Scalar det3_012_013 = rhs[F00]*det2_12_13 - rhs[F01]*det2_12_03 
                                + rhs[F03]*det2_12_01;
  const Scalar det3_012_023 = rhs[F00]*det2_12_23 - rhs[F02]*det2_12_03 
                                + rhs[F03]*det2_12_02;
  const Scalar det3_012_123 = rhs[F01]*det2_12_23 - rhs[F02]*det2_12_13 
                                + rhs[F03]*det2_12_12;
  const Scalar det3_013_012 = rhs[F00]*det2_13_12 - rhs[F01]*det2_13_02 
                                + rhs[F02]*det2_13_01;
  const Scalar det3_013_013 = rhs[F00]*det2_13_13 - rhs[F01]*det2_13_03
                                + rhs[F03]*det2_13_01;
  const Scalar det3_013_023 = rhs[F00]*det2_13_23 - rhs[F02]*det2_13_03
                                + rhs[F03]*det2_13_02;
  const Scalar det3_013_123 = rhs[F01]*det2_13_23 - rhs[F02]*det2_13_13
                                + rhs[F03]*det2_13_12;
  const Scalar det3_023_012 = rhs[F00]*det2_23_12 - rhs[F01]*det2_23_02 
                                + rhs[F02]*det2_23_01;
  const Scalar det3_023_013 = rhs[F00]*det2_23_13 - rhs[F01]*det2_23_03
                                + rhs[F03]*det2_23_01;
  const Scalar det3_023_023 = rhs[F00]*det2_23_23 - rhs[F02]*det2_23_03
                                + rhs[F03]*det2_23_02;
  const Scalar det3_023_123 = rhs[F01]*det2_23_23 - rhs[F02]*det2_23_13
                                + rhs[F03]*det2_23_12;
  const Scalar det3_123_012 = rhs[F10]*det2_23_12 - rhs[F11]*det2_23_02 
                                + rhs[F12]*det2_23_01;
  const Scalar det3_123_013 = rhs[F10]*det2_23_13 - rhs[F11]*det2_23_03 
                                + rhs[F13]*det2_23_01;
  const Scalar det3_123_023 = rhs[F10]*det2_23_23 - rhs[F12]*det2_23_03 
                                + rhs[F13]*det2_23_02;
  const Scalar det3_123_123 = rhs[F11]*det2_23_23 - rhs[F12]*det2_23_13 
                                + rhs[F13]*det2_23_12;

  // Find the 4x4 det:

  const Scalar det = rhs[F00]*det3_123_123 - rhs[F01]*det3_123_023 
                       + rhs[F02]*det3_123_013 - rhs[F03]*det3_123_012;

//   if (determ)
//     *determ = det;

  if ( det == 0 ) {
    return false;
  }

  const Scalar oneOverDet = 1.0/det;
  const Scalar mn1OverDet = - oneOverDet;

  rhs[F00] =  det3_123_123 * oneOverDet;
  rhs[F01] =  det3_023_123 * mn1OverDet;
  rhs[F02] =  det3_013_123 * oneOverDet;
  rhs[F03] =  det3_012_123 * mn1OverDet;

  rhs[F10] =  det3_123_023 * mn1OverDet;
  rhs[F11] =  det3_023_023 * oneOverDet;
  rhs[F12] =  det3_013_023 * mn1OverDet;
  rhs[F13] =  det3_012_023 * oneOverDet;

  rhs[F20] =  det3_123_013 * oneOverDet;
  rhs[F21] =  det3_023_013 * mn1OverDet;
  rhs[F22] =  det3_013_013 * oneOverDet;
  rhs[F23] =  det3_012_013 * mn1OverDet;

  rhs[F30] =  det3_123_012 * mn1OverDet;
  rhs[F31] =  det3_023_012 * oneOverDet;
  rhs[F32] =  det3_013_012 * mn1OverDet;
  rhs[F33] =  det3_012_012 * oneOverDet;

  return true;
}

//==============================================================================
// Inversion for 5x5 matrices
//==============================================================================
// Mij are indices for a 5x5 matrix.
#define M00 0
#define M01 1
#define M02 2
#define M03 3
#define M04 4

#define M10 5
#define M11 6
#define M12 7
#define M13 8
#define M14 9

#define M20 10
#define M21 11
#define M22 12
#define M23 13
#define M24 14

#define M30 15
#define M31 16
#define M32 17
#define M33 18
#define M34 19

#define M40 20
#define M41 21
#define M42 22
#define M43 23
#define M44 24


/**
   Inversion for a 5x5 matrix
 */
template <class MatrixRep>
bool Inverter<5>::Dinv(MatrixRep & rhs) { 

  typedef typename MatrixRep::value_type Scalar; 

  // check matrix sizes ??

  //  Scalar * pM = rhs.Array();	


  // Find all NECESSARY 2x2 dets:  (30 of them)

  const Scalar det2_23_01 = rhs[M20]*rhs[M31] - rhs[M21]*rhs[M30];
  const Scalar det2_23_02 = rhs[M20]*rhs[M32] - rhs[M22]*rhs[M30];
  const Scalar det2_23_03 = rhs[M20]*rhs[M33] - rhs[M23]*rhs[M30];
  const Scalar det2_23_04 = rhs[M20]*rhs[M34] - rhs[M24]*rhs[M30];
  const Scalar det2_23_12 = rhs[M21]*rhs[M32] - rhs[M22]*rhs[M31];
  const Scalar det2_23_13 = rhs[M21]*rhs[M33] - rhs[M23]*rhs[M31];
  const Scalar det2_23_14 = rhs[M21]*rhs[M34] - rhs[M24]*rhs[M31];
  const Scalar det2_23_23 = rhs[M22]*rhs[M33] - rhs[M23]*rhs[M32];
  const Scalar det2_23_24 = rhs[M22]*rhs[M34] - rhs[M24]*rhs[M32];
  const Scalar det2_23_34 = rhs[M23]*rhs[M34] - rhs[M24]*rhs[M33];
  const Scalar det2_24_01 = rhs[M20]*rhs[M41] - rhs[M21]*rhs[M40];
  const Scalar det2_24_02 = rhs[M20]*rhs[M42] - rhs[M22]*rhs[M40];
  const Scalar det2_24_03 = rhs[M20]*rhs[M43] - rhs[M23]*rhs[M40];
  const Scalar det2_24_04 = rhs[M20]*rhs[M44] - rhs[M24]*rhs[M40];
  const Scalar det2_24_12 = rhs[M21]*rhs[M42] - rhs[M22]*rhs[M41];
  const Scalar det2_24_13 = rhs[M21]*rhs[M43] - rhs[M23]*rhs[M41];
  const Scalar det2_24_14 = rhs[M21]*rhs[M44] - rhs[M24]*rhs[M41];
  const Scalar det2_24_23 = rhs[M22]*rhs[M43] - rhs[M23]*rhs[M42];
  const Scalar det2_24_24 = rhs[M22]*rhs[M44] - rhs[M24]*rhs[M42];
  const Scalar det2_24_34 = rhs[M23]*rhs[M44] - rhs[M24]*rhs[M43];
  const Scalar det2_34_01 = rhs[M30]*rhs[M41] - rhs[M31]*rhs[M40];
  const Scalar det2_34_02 = rhs[M30]*rhs[M42] - rhs[M32]*rhs[M40];
  const Scalar det2_34_03 = rhs[M30]*rhs[M43] - rhs[M33]*rhs[M40];
  const Scalar det2_34_04 = rhs[M30]*rhs[M44] - rhs[M34]*rhs[M40];
  const Scalar det2_34_12 = rhs[M31]*rhs[M42] - rhs[M32]*rhs[M41];
  const Scalar det2_34_13 = rhs[M31]*rhs[M43] - rhs[M33]*rhs[M41];
  const Scalar det2_34_14 = rhs[M31]*rhs[M44] - rhs[M34]*rhs[M41];
  const Scalar det2_34_23 = rhs[M32]*rhs[M43] - rhs[M33]*rhs[M42];
  const Scalar det2_34_24 = rhs[M32]*rhs[M44] - rhs[M34]*rhs[M42];
  const Scalar det2_34_34 = rhs[M33]*rhs[M44] - rhs[M34]*rhs[M43];

  // Find all NECESSARY 3x3 dets:   (40 of them)

  const Scalar det3_123_012 = rhs[M10]*det2_23_12 - rhs[M11]*det2_23_02 + rhs[M12]*det2_23_01;
  const Scalar det3_123_013 = rhs[M10]*det2_23_13 - rhs[M11]*det2_23_03 + rhs[M13]*det2_23_01;
  const Scalar det3_123_014 = rhs[M10]*det2_23_14 - rhs[M11]*det2_23_04 + rhs[M14]*det2_23_01;
  const Scalar det3_123_023 = rhs[M10]*det2_23_23 - rhs[M12]*det2_23_03 + rhs[M13]*det2_23_02;
  const Scalar det3_123_024 = rhs[M10]*det2_23_24 - rhs[M12]*det2_23_04 + rhs[M14]*det2_23_02;
  const Scalar det3_123_034 = rhs[M10]*det2_23_34 - rhs[M13]*det2_23_04 + rhs[M14]*det2_23_03;
  const Scalar det3_123_123 = rhs[M11]*det2_23_23 - rhs[M12]*det2_23_13 + rhs[M13]*det2_23_12;
  const Scalar det3_123_124 = rhs[M11]*det2_23_24 - rhs[M12]*det2_23_14 + rhs[M14]*det2_23_12;
  const Scalar det3_123_134 = rhs[M11]*det2_23_34 - rhs[M13]*det2_23_14 + rhs[M14]*det2_23_13;
  const Scalar det3_123_234 = rhs[M12]*det2_23_34 - rhs[M13]*det2_23_24 + rhs[M14]*det2_23_23;
  const Scalar det3_124_012 = rhs[M10]*det2_24_12 - rhs[M11]*det2_24_02 + rhs[M12]*det2_24_01;
  const Scalar det3_124_013 = rhs[M10]*det2_24_13 - rhs[M11]*det2_24_03 + rhs[M13]*det2_24_01;
  const Scalar det3_124_014 = rhs[M10]*det2_24_14 - rhs[M11]*det2_24_04 + rhs[M14]*det2_24_01;
  const Scalar det3_124_023 = rhs[M10]*det2_24_23 - rhs[M12]*det2_24_03 + rhs[M13]*det2_24_02;
  const Scalar det3_124_024 = rhs[M10]*det2_24_24 - rhs[M12]*det2_24_04 + rhs[M14]*det2_24_02;
  const Scalar det3_124_034 = rhs[M10]*det2_24_34 - rhs[M13]*det2_24_04 + rhs[M14]*det2_24_03;
  const Scalar det3_124_123 = rhs[M11]*det2_24_23 - rhs[M12]*det2_24_13 + rhs[M13]*det2_24_12;
  const Scalar det3_124_124 = rhs[M11]*det2_24_24 - rhs[M12]*det2_24_14 + rhs[M14]*det2_24_12;
  const Scalar det3_124_134 = rhs[M11]*det2_24_34 - rhs[M13]*det2_24_14 + rhs[M14]*det2_24_13;
  const Scalar det3_124_234 = rhs[M12]*det2_24_34 - rhs[M13]*det2_24_24 + rhs[M14]*det2_24_23;
  const Scalar det3_134_012 = rhs[M10]*det2_34_12 - rhs[M11]*det2_34_02 + rhs[M12]*det2_34_01;
  const Scalar det3_134_013 = rhs[M10]*det2_34_13 - rhs[M11]*det2_34_03 + rhs[M13]*det2_34_01;
  const Scalar det3_134_014 = rhs[M10]*det2_34_14 - rhs[M11]*det2_34_04 + rhs[M14]*det2_34_01;
  const Scalar det3_134_023 = rhs[M10]*det2_34_23 - rhs[M12]*det2_34_03 + rhs[M13]*det2_34_02;
  const Scalar det3_134_024 = rhs[M10]*det2_34_24 - rhs[M12]*det2_34_04 + rhs[M14]*det2_34_02;
  const Scalar det3_134_034 = rhs[M10]*det2_34_34 - rhs[M13]*det2_34_04 + rhs[M14]*det2_34_03;
  const Scalar det3_134_123 = rhs[M11]*det2_34_23 - rhs[M12]*det2_34_13 + rhs[M13]*det2_34_12;
  const Scalar det3_134_124 = rhs[M11]*det2_34_24 - rhs[M12]*det2_34_14 + rhs[M14]*det2_34_12;
  const Scalar det3_134_134 = rhs[M11]*det2_34_34 - rhs[M13]*det2_34_14 + rhs[M14]*det2_34_13;
  const Scalar det3_134_234 = rhs[M12]*det2_34_34 - rhs[M13]*det2_34_24 + rhs[M14]*det2_34_23;
  const Scalar det3_234_012 = rhs[M20]*det2_34_12 - rhs[M21]*det2_34_02 + rhs[M22]*det2_34_01;
  const Scalar det3_234_013 = rhs[M20]*det2_34_13 - rhs[M21]*det2_34_03 + rhs[M23]*det2_34_01;
  const Scalar det3_234_014 = rhs[M20]*det2_34_14 - rhs[M21]*det2_34_04 + rhs[M24]*det2_34_01;
  const Scalar det3_234_023 = rhs[M20]*det2_34_23 - rhs[M22]*det2_34_03 + rhs[M23]*det2_34_02;
  const Scalar det3_234_024 = rhs[M20]*det2_34_24 - rhs[M22]*det2_34_04 + rhs[M24]*det2_34_02;
  const Scalar det3_234_034 = rhs[M20]*det2_34_34 - rhs[M23]*det2_34_04 + rhs[M24]*det2_34_03;
  const Scalar det3_234_123 = rhs[M21]*det2_34_23 - rhs[M22]*det2_34_13 + rhs[M23]*det2_34_12;
  const Scalar det3_234_124 = rhs[M21]*det2_34_24 - rhs[M22]*det2_34_14 + rhs[M24]*det2_34_12;
  const Scalar det3_234_134 = rhs[M21]*det2_34_34 - rhs[M23]*det2_34_14 + rhs[M24]*det2_34_13;
  const Scalar det3_234_234 = rhs[M22]*det2_34_34 - rhs[M23]*det2_34_24 + rhs[M24]*det2_34_23;

  // Find all NECESSARY 4x4 dets:   (25 of them)

  const Scalar det4_0123_0123 = rhs[M00]*det3_123_123 - rhs[M01]*det3_123_023 
                                  + rhs[M02]*det3_123_013 - rhs[M03]*det3_123_012;
  const Scalar det4_0123_0124 = rhs[M00]*det3_123_124 - rhs[M01]*det3_123_024 
                                  + rhs[M02]*det3_123_014 - rhs[M04]*det3_123_012;
  const Scalar det4_0123_0134 = rhs[M00]*det3_123_134 - rhs[M01]*det3_123_034 
                                  + rhs[M03]*det3_123_014 - rhs[M04]*det3_123_013;
  const Scalar det4_0123_0234 = rhs[M00]*det3_123_234 - rhs[M02]*det3_123_034 
                                  + rhs[M03]*det3_123_024 - rhs[M04]*det3_123_023;
  const Scalar det4_0123_1234 = rhs[M01]*det3_123_234 - rhs[M02]*det3_123_134 
                                  + rhs[M03]*det3_123_124 - rhs[M04]*det3_123_123;
  const Scalar det4_0124_0123 = rhs[M00]*det3_124_123 - rhs[M01]*det3_124_023 
                                  + rhs[M02]*det3_124_013 - rhs[M03]*det3_124_012;
  const Scalar det4_0124_0124 = rhs[M00]*det3_124_124 - rhs[M01]*det3_124_024 
                                  + rhs[M02]*det3_124_014 - rhs[M04]*det3_124_012;
  const Scalar det4_0124_0134 = rhs[M00]*det3_124_134 - rhs[M01]*det3_124_034 
                                  + rhs[M03]*det3_124_014 - rhs[M04]*det3_124_013;
  const Scalar det4_0124_0234 = rhs[M00]*det3_124_234 - rhs[M02]*det3_124_034 
                                  + rhs[M03]*det3_124_024 - rhs[M04]*det3_124_023;
  const Scalar det4_0124_1234 = rhs[M01]*det3_124_234 - rhs[M02]*det3_124_134 
                                  + rhs[M03]*det3_124_124 - rhs[M04]*det3_124_123;
  const Scalar det4_0134_0123 = rhs[M00]*det3_134_123 - rhs[M01]*det3_134_023 
                                  + rhs[M02]*det3_134_013 - rhs[M03]*det3_134_012;
  const Scalar det4_0134_0124 = rhs[M00]*det3_134_124 - rhs[M01]*det3_134_024 
                                  + rhs[M02]*det3_134_014 - rhs[M04]*det3_134_012;
  const Scalar det4_0134_0134 = rhs[M00]*det3_134_134 - rhs[M01]*det3_134_034 
                                  + rhs[M03]*det3_134_014 - rhs[M04]*det3_134_013;
  const Scalar det4_0134_0234 = rhs[M00]*det3_134_234 - rhs[M02]*det3_134_034 
                                  + rhs[M03]*det3_134_024 - rhs[M04]*det3_134_023;
  const Scalar det4_0134_1234 = rhs[M01]*det3_134_234 - rhs[M02]*det3_134_134 
                                  + rhs[M03]*det3_134_124 - rhs[M04]*det3_134_123;
  const Scalar det4_0234_0123 = rhs[M00]*det3_234_123 - rhs[M01]*det3_234_023 
                                  + rhs[M02]*det3_234_013 - rhs[M03]*det3_234_012;
  const Scalar det4_0234_0124 = rhs[M00]*det3_234_124 - rhs[M01]*det3_234_024 
                                  + rhs[M02]*det3_234_014 - rhs[M04]*det3_234_012;
  const Scalar det4_0234_0134 = rhs[M00]*det3_234_134 - rhs[M01]*det3_234_034 
                                  + rhs[M03]*det3_234_014 - rhs[M04]*det3_234_013;
  const Scalar det4_0234_0234 = rhs[M00]*det3_234_234 - rhs[M02]*det3_234_034 
                                  + rhs[M03]*det3_234_024 - rhs[M04]*det3_234_023;
  const Scalar det4_0234_1234 = rhs[M01]*det3_234_234 - rhs[M02]*det3_234_134 
                                  + rhs[M03]*det3_234_124 - rhs[M04]*det3_234_123;
  const Scalar det4_1234_0123 = rhs[M10]*det3_234_123 - rhs[M11]*det3_234_023 
                                  + rhs[M12]*det3_234_013 - rhs[M13]*det3_234_012;
  const Scalar det4_1234_0124 = rhs[M10]*det3_234_124 - rhs[M11]*det3_234_024 
                                  + rhs[M12]*det3_234_014 - rhs[M14]*det3_234_012;
  const Scalar det4_1234_0134 = rhs[M10]*det3_234_134 - rhs[M11]*det3_234_034 
                                  + rhs[M13]*det3_234_014 - rhs[M14]*det3_234_013;
  const Scalar det4_1234_0234 = rhs[M10]*det3_234_234 - rhs[M12]*det3_234_034 
                                  + rhs[M13]*det3_234_024 - rhs[M14]*det3_234_023;
  const Scalar det4_1234_1234 = rhs[M11]*det3_234_234 - rhs[M12]*det3_234_134 
                                  + rhs[M13]*det3_234_124 - rhs[M14]*det3_234_123;

  // Find the 5x5 det:

  const Scalar det = rhs[M00]*det4_1234_1234 - rhs[M01]*det4_1234_0234 + rhs[M02]*det4_1234_0134 
                       - rhs[M03]*det4_1234_0124 + rhs[M04]*det4_1234_0123;

//   if (determ)
//     *determ = det;

  if ( det == 0 ) {
    //Error("Inv5x5","matrix is singular");
    //m.Invalidate();
    return false;
  }

  const Scalar oneOverDet = 1.0/det;
  const Scalar mn1OverDet = - oneOverDet;

  rhs[M00] =  det4_1234_1234 * oneOverDet;
  rhs[M01] =  det4_0234_1234 * mn1OverDet;
  rhs[M02] =  det4_0134_1234 * oneOverDet;
  rhs[M03] =  det4_0124_1234 * mn1OverDet;
  rhs[M04] =  det4_0123_1234 * oneOverDet;

  rhs[M10] =  det4_1234_0234 * mn1OverDet;
  rhs[M11] =  det4_0234_0234 * oneOverDet;
  rhs[M12] =  det4_0134_0234 * mn1OverDet;
  rhs[M13] =  det4_0124_0234 * oneOverDet;
  rhs[M14] =  det4_0123_0234 * mn1OverDet;

  rhs[M20] =  det4_1234_0134 * oneOverDet;
  rhs[M21] =  det4_0234_0134 * mn1OverDet;
  rhs[M22] =  det4_0134_0134 * oneOverDet;
  rhs[M23] =  det4_0124_0134 * mn1OverDet;
  rhs[M24] =  det4_0123_0134 * oneOverDet;

  rhs[M30] =  det4_1234_0124 * mn1OverDet;
  rhs[M31] =  det4_0234_0124 * oneOverDet;
  rhs[M32] =  det4_0134_0124 * mn1OverDet;
  rhs[M33] =  det4_0124_0124 * oneOverDet;
  rhs[M34] =  det4_0123_0124 * mn1OverDet;

  rhs[M40] =  det4_1234_0123 * oneOverDet;
  rhs[M41] =  det4_0234_0123 * mn1OverDet;
  rhs[M42] =  det4_0134_0123 * oneOverDet;
  rhs[M43] =  det4_0124_0123 * mn1OverDet;
  rhs[M44] =  det4_0123_0123 * oneOverDet;

  return true;
}

//==============================================================================
// Inversion for 6x6 matrices
//==============================================================================
// Aij are indices for a 6x6 matrix.

#define A00 0
#define A01 1
#define A02 2
#define A03 3
#define A04 4
#define A05 5

#define A10 6
#define A11 7
#define A12 8
#define A13 9
#define A14 10
#define A15 11

#define A20 12
#define A21 13
#define A22 14
#define A23 15
#define A24 16
#define A25 17

#define A30 18
#define A31 19
#define A32 20
#define A33 21
#define A34 22
#define A35 23

#define A40 24
#define A41 25
#define A42 26
#define A43 27
#define A44 28
#define A45 29

#define A50 30
#define A51 31
#define A52 32
#define A53 33
#define A54 34
#define A55 35


/**
   Inversion for a 6x6 matrix
 */
template <class MatrixRep>
bool Inverter<6>::Dinv(MatrixRep & rhs) { 

  typedef typename MatrixRep::value_type Scalar; 

  // check matrix sizes ??

  //  Scalar * pM = rhs.Array();	


  // Find all NECESSARY 2x2 dets:  (45 of them)

  const Scalar det2_34_01 = rhs[A30]*rhs[A41] - rhs[A31]*rhs[A40];
  const Scalar det2_34_02 = rhs[A30]*rhs[A42] - rhs[A32]*rhs[A40];
  const Scalar det2_34_03 = rhs[A30]*rhs[A43] - rhs[A33]*rhs[A40];
  const Scalar det2_34_04 = rhs[A30]*rhs[A44] - rhs[A34]*rhs[A40];
  const Scalar det2_34_05 = rhs[A30]*rhs[A45] - rhs[A35]*rhs[A40];
  const Scalar det2_34_12 = rhs[A31]*rhs[A42] - rhs[A32]*rhs[A41];
  const Scalar det2_34_13 = rhs[A31]*rhs[A43] - rhs[A33]*rhs[A41];
  const Scalar det2_34_14 = rhs[A31]*rhs[A44] - rhs[A34]*rhs[A41];
  const Scalar det2_34_15 = rhs[A31]*rhs[A45] - rhs[A35]*rhs[A41];
  const Scalar det2_34_23 = rhs[A32]*rhs[A43] - rhs[A33]*rhs[A42];
  const Scalar det2_34_24 = rhs[A32]*rhs[A44] - rhs[A34]*rhs[A42];
  const Scalar det2_34_25 = rhs[A32]*rhs[A45] - rhs[A35]*rhs[A42];
  const Scalar det2_34_34 = rhs[A33]*rhs[A44] - rhs[A34]*rhs[A43];
  const Scalar det2_34_35 = rhs[A33]*rhs[A45] - rhs[A35]*rhs[A43];
  const Scalar det2_34_45 = rhs[A34]*rhs[A45] - rhs[A35]*rhs[A44];
  const Scalar det2_35_01 = rhs[A30]*rhs[A51] - rhs[A31]*rhs[A50];
  const Scalar det2_35_02 = rhs[A30]*rhs[A52] - rhs[A32]*rhs[A50];
  const Scalar det2_35_03 = rhs[A30]*rhs[A53] - rhs[A33]*rhs[A50];
  const Scalar det2_35_04 = rhs[A30]*rhs[A54] - rhs[A34]*rhs[A50];
  const Scalar det2_35_05 = rhs[A30]*rhs[A55] - rhs[A35]*rhs[A50];
  const Scalar det2_35_12 = rhs[A31]*rhs[A52] - rhs[A32]*rhs[A51];
  const Scalar det2_35_13 = rhs[A31]*rhs[A53] - rhs[A33]*rhs[A51];
  const Scalar det2_35_14 = rhs[A31]*rhs[A54] - rhs[A34]*rhs[A51];
  const Scalar det2_35_15 = rhs[A31]*rhs[A55] - rhs[A35]*rhs[A51];
  const Scalar det2_35_23 = rhs[A32]*rhs[A53] - rhs[A33]*rhs[A52];
  const Scalar det2_35_24 = rhs[A32]*rhs[A54] - rhs[A34]*rhs[A52];
  const Scalar det2_35_25 = rhs[A32]*rhs[A55] - rhs[A35]*rhs[A52];
  const Scalar det2_35_34 = rhs[A33]*rhs[A54] - rhs[A34]*rhs[A53];
  const Scalar det2_35_35 = rhs[A33]*rhs[A55] - rhs[A35]*rhs[A53];
  const Scalar det2_35_45 = rhs[A34]*rhs[A55] - rhs[A35]*rhs[A54];
  const Scalar det2_45_01 = rhs[A40]*rhs[A51] - rhs[A41]*rhs[A50];
  const Scalar det2_45_02 = rhs[A40]*rhs[A52] - rhs[A42]*rhs[A50];
  const Scalar det2_45_03 = rhs[A40]*rhs[A53] - rhs[A43]*rhs[A50];
  const Scalar det2_45_04 = rhs[A40]*rhs[A54] - rhs[A44]*rhs[A50];
  const Scalar det2_45_05 = rhs[A40]*rhs[A55] - rhs[A45]*rhs[A50];
  const Scalar det2_45_12 = rhs[A41]*rhs[A52] - rhs[A42]*rhs[A51];
  const Scalar det2_45_13 = rhs[A41]*rhs[A53] - rhs[A43]*rhs[A51];
  const Scalar det2_45_14 = rhs[A41]*rhs[A54] - rhs[A44]*rhs[A51];
  const Scalar det2_45_15 = rhs[A41]*rhs[A55] - rhs[A45]*rhs[A51];
  const Scalar det2_45_23 = rhs[A42]*rhs[A53] - rhs[A43]*rhs[A52];
  const Scalar det2_45_24 = rhs[A42]*rhs[A54] - rhs[A44]*rhs[A52];
  const Scalar det2_45_25 = rhs[A42]*rhs[A55] - rhs[A45]*rhs[A52];
  const Scalar det2_45_34 = rhs[A43]*rhs[A54] - rhs[A44]*rhs[A53];
  const Scalar det2_45_35 = rhs[A43]*rhs[A55] - rhs[A45]*rhs[A53];
  const Scalar det2_45_45 = rhs[A44]*rhs[A55] - rhs[A45]*rhs[A54];

  // Find all NECESSARY 3x3 dets:  (80 of them)

  const Scalar det3_234_012 = rhs[A20]*det2_34_12 - rhs[A21]*det2_34_02 + rhs[A22]*det2_34_01;
  const Scalar det3_234_013 = rhs[A20]*det2_34_13 - rhs[A21]*det2_34_03 + rhs[A23]*det2_34_01;
  const Scalar det3_234_014 = rhs[A20]*det2_34_14 - rhs[A21]*det2_34_04 + rhs[A24]*det2_34_01;
  const Scalar det3_234_015 = rhs[A20]*det2_34_15 - rhs[A21]*det2_34_05 + rhs[A25]*det2_34_01;
  const Scalar det3_234_023 = rhs[A20]*det2_34_23 - rhs[A22]*det2_34_03 + rhs[A23]*det2_34_02;
  const Scalar det3_234_024 = rhs[A20]*det2_34_24 - rhs[A22]*det2_34_04 + rhs[A24]*det2_34_02;
  const Scalar det3_234_025 = rhs[A20]*det2_34_25 - rhs[A22]*det2_34_05 + rhs[A25]*det2_34_02;
  const Scalar det3_234_034 = rhs[A20]*det2_34_34 - rhs[A23]*det2_34_04 + rhs[A24]*det2_34_03;
  const Scalar det3_234_035 = rhs[A20]*det2_34_35 - rhs[A23]*det2_34_05 + rhs[A25]*det2_34_03;
  const Scalar det3_234_045 = rhs[A20]*det2_34_45 - rhs[A24]*det2_34_05 + rhs[A25]*det2_34_04;
  const Scalar det3_234_123 = rhs[A21]*det2_34_23 - rhs[A22]*det2_34_13 + rhs[A23]*det2_34_12;
  const Scalar det3_234_124 = rhs[A21]*det2_34_24 - rhs[A22]*det2_34_14 + rhs[A24]*det2_34_12;
  const Scalar det3_234_125 = rhs[A21]*det2_34_25 - rhs[A22]*det2_34_15 + rhs[A25]*det2_34_12;
  const Scalar det3_234_134 = rhs[A21]*det2_34_34 - rhs[A23]*det2_34_14 + rhs[A24]*det2_34_13;
  const Scalar det3_234_135 = rhs[A21]*det2_34_35 - rhs[A23]*det2_34_15 + rhs[A25]*det2_34_13;
  const Scalar det3_234_145 = rhs[A21]*det2_34_45 - rhs[A24]*det2_34_15 + rhs[A25]*det2_34_14;
  const Scalar det3_234_234 = rhs[A22]*det2_34_34 - rhs[A23]*det2_34_24 + rhs[A24]*det2_34_23;
  const Scalar det3_234_235 = rhs[A22]*det2_34_35 - rhs[A23]*det2_34_25 + rhs[A25]*det2_34_23;
  const Scalar det3_234_245 = rhs[A22]*det2_34_45 - rhs[A24]*det2_34_25 + rhs[A25]*det2_34_24;
  const Scalar det3_234_345 = rhs[A23]*det2_34_45 - rhs[A24]*det2_34_35 + rhs[A25]*det2_34_34;
  const Scalar det3_235_012 = rhs[A20]*det2_35_12 - rhs[A21]*det2_35_02 + rhs[A22]*det2_35_01;
  const Scalar det3_235_013 = rhs[A20]*det2_35_13 - rhs[A21]*det2_35_03 + rhs[A23]*det2_35_01;
  const Scalar det3_235_014 = rhs[A20]*det2_35_14 - rhs[A21]*det2_35_04 + rhs[A24]*det2_35_01;
  const Scalar det3_235_015 = rhs[A20]*det2_35_15 - rhs[A21]*det2_35_05 + rhs[A25]*det2_35_01;
  const Scalar det3_235_023 = rhs[A20]*det2_35_23 - rhs[A22]*det2_35_03 + rhs[A23]*det2_35_02;
  const Scalar det3_235_024 = rhs[A20]*det2_35_24 - rhs[A22]*det2_35_04 + rhs[A24]*det2_35_02;
  const Scalar det3_235_025 = rhs[A20]*det2_35_25 - rhs[A22]*det2_35_05 + rhs[A25]*det2_35_02;
  const Scalar det3_235_034 = rhs[A20]*det2_35_34 - rhs[A23]*det2_35_04 + rhs[A24]*det2_35_03;
  const Scalar det3_235_035 = rhs[A20]*det2_35_35 - rhs[A23]*det2_35_05 + rhs[A25]*det2_35_03;
  const Scalar det3_235_045 = rhs[A20]*det2_35_45 - rhs[A24]*det2_35_05 + rhs[A25]*det2_35_04;
  const Scalar det3_235_123 = rhs[A21]*det2_35_23 - rhs[A22]*det2_35_13 + rhs[A23]*det2_35_12;
  const Scalar det3_235_124 = rhs[A21]*det2_35_24 - rhs[A22]*det2_35_14 + rhs[A24]*det2_35_12;
  const Scalar det3_235_125 = rhs[A21]*det2_35_25 - rhs[A22]*det2_35_15 + rhs[A25]*det2_35_12;
  const Scalar det3_235_134 = rhs[A21]*det2_35_34 - rhs[A23]*det2_35_14 + rhs[A24]*det2_35_13;
  const Scalar det3_235_135 = rhs[A21]*det2_35_35 - rhs[A23]*det2_35_15 + rhs[A25]*det2_35_13;
  const Scalar det3_235_145 = rhs[A21]*det2_35_45 - rhs[A24]*det2_35_15 + rhs[A25]*det2_35_14;
  const Scalar det3_235_234 = rhs[A22]*det2_35_34 - rhs[A23]*det2_35_24 + rhs[A24]*det2_35_23;
  const Scalar det3_235_235 = rhs[A22]*det2_35_35 - rhs[A23]*det2_35_25 + rhs[A25]*det2_35_23;
  const Scalar det3_235_245 = rhs[A22]*det2_35_45 - rhs[A24]*det2_35_25 + rhs[A25]*det2_35_24;
  const Scalar det3_235_345 = rhs[A23]*det2_35_45 - rhs[A24]*det2_35_35 + rhs[A25]*det2_35_34;
  const Scalar det3_245_012 = rhs[A20]*det2_45_12 - rhs[A21]*det2_45_02 + rhs[A22]*det2_45_01;
  const Scalar det3_245_013 = rhs[A20]*det2_45_13 - rhs[A21]*det2_45_03 + rhs[A23]*det2_45_01;
  const Scalar det3_245_014 = rhs[A20]*det2_45_14 - rhs[A21]*det2_45_04 + rhs[A24]*det2_45_01;
  const Scalar det3_245_015 = rhs[A20]*det2_45_15 - rhs[A21]*det2_45_05 + rhs[A25]*det2_45_01;
  const Scalar det3_245_023 = rhs[A20]*det2_45_23 - rhs[A22]*det2_45_03 + rhs[A23]*det2_45_02;
  const Scalar det3_245_024 = rhs[A20]*det2_45_24 - rhs[A22]*det2_45_04 + rhs[A24]*det2_45_02;
  const Scalar det3_245_025 = rhs[A20]*det2_45_25 - rhs[A22]*det2_45_05 + rhs[A25]*det2_45_02;
  const Scalar det3_245_034 = rhs[A20]*det2_45_34 - rhs[A23]*det2_45_04 + rhs[A24]*det2_45_03;
  const Scalar det3_245_035 = rhs[A20]*det2_45_35 - rhs[A23]*det2_45_05 + rhs[A25]*det2_45_03;
  const Scalar det3_245_045 = rhs[A20]*det2_45_45 - rhs[A24]*det2_45_05 + rhs[A25]*det2_45_04;
  const Scalar det3_245_123 = rhs[A21]*det2_45_23 - rhs[A22]*det2_45_13 + rhs[A23]*det2_45_12;
  const Scalar det3_245_124 = rhs[A21]*det2_45_24 - rhs[A22]*det2_45_14 + rhs[A24]*det2_45_12;
  const Scalar det3_245_125 = rhs[A21]*det2_45_25 - rhs[A22]*det2_45_15 + rhs[A25]*det2_45_12;
  const Scalar det3_245_134 = rhs[A21]*det2_45_34 - rhs[A23]*det2_45_14 + rhs[A24]*det2_45_13;
  const Scalar det3_245_135 = rhs[A21]*det2_45_35 - rhs[A23]*det2_45_15 + rhs[A25]*det2_45_13;
  const Scalar det3_245_145 = rhs[A21]*det2_45_45 - rhs[A24]*det2_45_15 + rhs[A25]*det2_45_14;
  const Scalar det3_245_234 = rhs[A22]*det2_45_34 - rhs[A23]*det2_45_24 + rhs[A24]*det2_45_23;
  const Scalar det3_245_235 = rhs[A22]*det2_45_35 - rhs[A23]*det2_45_25 + rhs[A25]*det2_45_23;
  const Scalar det3_245_245 = rhs[A22]*det2_45_45 - rhs[A24]*det2_45_25 + rhs[A25]*det2_45_24;
  const Scalar det3_245_345 = rhs[A23]*det2_45_45 - rhs[A24]*det2_45_35 + rhs[A25]*det2_45_34;
  const Scalar det3_345_012 = rhs[A30]*det2_45_12 - rhs[A31]*det2_45_02 + rhs[A32]*det2_45_01;
  const Scalar det3_345_013 = rhs[A30]*det2_45_13 - rhs[A31]*det2_45_03 + rhs[A33]*det2_45_01;
  const Scalar det3_345_014 = rhs[A30]*det2_45_14 - rhs[A31]*det2_45_04 + rhs[A34]*det2_45_01;
  const Scalar det3_345_015 = rhs[A30]*det2_45_15 - rhs[A31]*det2_45_05 + rhs[A35]*det2_45_01;
  const Scalar det3_345_023 = rhs[A30]*det2_45_23 - rhs[A32]*det2_45_03 + rhs[A33]*det2_45_02;
  const Scalar det3_345_024 = rhs[A30]*det2_45_24 - rhs[A32]*det2_45_04 + rhs[A34]*det2_45_02;
  const Scalar det3_345_025 = rhs[A30]*det2_45_25 - rhs[A32]*det2_45_05 + rhs[A35]*det2_45_02;
  const Scalar det3_345_034 = rhs[A30]*det2_45_34 - rhs[A33]*det2_45_04 + rhs[A34]*det2_45_03;
  const Scalar det3_345_035 = rhs[A30]*det2_45_35 - rhs[A33]*det2_45_05 + rhs[A35]*det2_45_03;
  const Scalar det3_345_045 = rhs[A30]*det2_45_45 - rhs[A34]*det2_45_05 + rhs[A35]*det2_45_04;
  const Scalar det3_345_123 = rhs[A31]*det2_45_23 - rhs[A32]*det2_45_13 + rhs[A33]*det2_45_12;
  const Scalar det3_345_124 = rhs[A31]*det2_45_24 - rhs[A32]*det2_45_14 + rhs[A34]*det2_45_12;
  const Scalar det3_345_125 = rhs[A31]*det2_45_25 - rhs[A32]*det2_45_15 + rhs[A35]*det2_45_12;
  const Scalar det3_345_134 = rhs[A31]*det2_45_34 - rhs[A33]*det2_45_14 + rhs[A34]*det2_45_13;
  const Scalar det3_345_135 = rhs[A31]*det2_45_35 - rhs[A33]*det2_45_15 + rhs[A35]*det2_45_13;
  const Scalar det3_345_145 = rhs[A31]*det2_45_45 - rhs[A34]*det2_45_15 + rhs[A35]*det2_45_14;
  const Scalar det3_345_234 = rhs[A32]*det2_45_34 - rhs[A33]*det2_45_24 + rhs[A34]*det2_45_23;
  const Scalar det3_345_235 = rhs[A32]*det2_45_35 - rhs[A33]*det2_45_25 + rhs[A35]*det2_45_23;
  const Scalar det3_345_245 = rhs[A32]*det2_45_45 - rhs[A34]*det2_45_25 + rhs[A35]*det2_45_24;
  const Scalar det3_345_345 = rhs[A33]*det2_45_45 - rhs[A34]*det2_45_35 + rhs[A35]*det2_45_34;

  // Find all NECESSARY 4x4 dets:  (75 of them)

  const Scalar det4_1234_0123 = rhs[A10]*det3_234_123 - rhs[A11]*det3_234_023 
                                  + rhs[A12]*det3_234_013 - rhs[A13]*det3_234_012;
  const Scalar det4_1234_0124 = rhs[A10]*det3_234_124 - rhs[A11]*det3_234_024 
                                  + rhs[A12]*det3_234_014 - rhs[A14]*det3_234_012;
  const Scalar det4_1234_0125 = rhs[A10]*det3_234_125 - rhs[A11]*det3_234_025 
                                  + rhs[A12]*det3_234_015 - rhs[A15]*det3_234_012;
  const Scalar det4_1234_0134 = rhs[A10]*det3_234_134 - rhs[A11]*det3_234_034 
                                  + rhs[A13]*det3_234_014 - rhs[A14]*det3_234_013;
  const Scalar det4_1234_0135 = rhs[A10]*det3_234_135 - rhs[A11]*det3_234_035
                                  + rhs[A13]*det3_234_015 - rhs[A15]*det3_234_013;
  const Scalar det4_1234_0145 = rhs[A10]*det3_234_145 - rhs[A11]*det3_234_045
                                  + rhs[A14]*det3_234_015 - rhs[A15]*det3_234_014;
  const Scalar det4_1234_0234 = rhs[A10]*det3_234_234 - rhs[A12]*det3_234_034 
                                  + rhs[A13]*det3_234_024 - rhs[A14]*det3_234_023;
  const Scalar det4_1234_0235 = rhs[A10]*det3_234_235 - rhs[A12]*det3_234_035 
                                  + rhs[A13]*det3_234_025 - rhs[A15]*det3_234_023;
  const Scalar det4_1234_0245 = rhs[A10]*det3_234_245 - rhs[A12]*det3_234_045 
                                  + rhs[A14]*det3_234_025 - rhs[A15]*det3_234_024;
  const Scalar det4_1234_0345 = rhs[A10]*det3_234_345 - rhs[A13]*det3_234_045 
                                  + rhs[A14]*det3_234_035 - rhs[A15]*det3_234_034;
  const Scalar det4_1234_1234 = rhs[A11]*det3_234_234 - rhs[A12]*det3_234_134 
                                  + rhs[A13]*det3_234_124 - rhs[A14]*det3_234_123;
  const Scalar det4_1234_1235 = rhs[A11]*det3_234_235 - rhs[A12]*det3_234_135 
                                  + rhs[A13]*det3_234_125 - rhs[A15]*det3_234_123;
  const Scalar det4_1234_1245 = rhs[A11]*det3_234_245 - rhs[A12]*det3_234_145 
                                  + rhs[A14]*det3_234_125 - rhs[A15]*det3_234_124;
  const Scalar det4_1234_1345 = rhs[A11]*det3_234_345 - rhs[A13]*det3_234_145 
                                  + rhs[A14]*det3_234_135 - rhs[A15]*det3_234_134;
  const Scalar det4_1234_2345 = rhs[A12]*det3_234_345 - rhs[A13]*det3_234_245 
                                  + rhs[A14]*det3_234_235 - rhs[A15]*det3_234_234;
  const Scalar det4_1235_0123 = rhs[A10]*det3_235_123 - rhs[A11]*det3_235_023 
                                  + rhs[A12]*det3_235_013 - rhs[A13]*det3_235_012;
  const Scalar det4_1235_0124 = rhs[A10]*det3_235_124 - rhs[A11]*det3_235_024 
                                  + rhs[A12]*det3_235_014 - rhs[A14]*det3_235_012;
  const Scalar det4_1235_0125 = rhs[A10]*det3_235_125 - rhs[A11]*det3_235_025 
                                  + rhs[A12]*det3_235_015 - rhs[A15]*det3_235_012;
  const Scalar det4_1235_0134 = rhs[A10]*det3_235_134 - rhs[A11]*det3_235_034 
                                  + rhs[A13]*det3_235_014 - rhs[A14]*det3_235_013;
  const Scalar det4_1235_0135 = rhs[A10]*det3_235_135 - rhs[A11]*det3_235_035 
                                  + rhs[A13]*det3_235_015 - rhs[A15]*det3_235_013;
  const Scalar det4_1235_0145 = rhs[A10]*det3_235_145 - rhs[A11]*det3_235_045 
                                  + rhs[A14]*det3_235_015 - rhs[A15]*det3_235_014;
  const Scalar det4_1235_0234 = rhs[A10]*det3_235_234 - rhs[A12]*det3_235_034 
                                  + rhs[A13]*det3_235_024 - rhs[A14]*det3_235_023;
  const Scalar det4_1235_0235 = rhs[A10]*det3_235_235 - rhs[A12]*det3_235_035 
                                  + rhs[A13]*det3_235_025 - rhs[A15]*det3_235_023;
  const Scalar det4_1235_0245 = rhs[A10]*det3_235_245 - rhs[A12]*det3_235_045 
                                  + rhs[A14]*det3_235_025 - rhs[A15]*det3_235_024;
  const Scalar det4_1235_0345 = rhs[A10]*det3_235_345 - rhs[A13]*det3_235_045 
                                  + rhs[A14]*det3_235_035 - rhs[A15]*det3_235_034;
  const Scalar det4_1235_1234 = rhs[A11]*det3_235_234 - rhs[A12]*det3_235_134 
                                  + rhs[A13]*det3_235_124 - rhs[A14]*det3_235_123;
  const Scalar det4_1235_1235 = rhs[A11]*det3_235_235 - rhs[A12]*det3_235_135 
                                  + rhs[A13]*det3_235_125 - rhs[A15]*det3_235_123;
  const Scalar det4_1235_1245 = rhs[A11]*det3_235_245 - rhs[A12]*det3_235_145 
                                  + rhs[A14]*det3_235_125 - rhs[A15]*det3_235_124;
  const Scalar det4_1235_1345 = rhs[A11]*det3_235_345 - rhs[A13]*det3_235_145 
                                  + rhs[A14]*det3_235_135 - rhs[A15]*det3_235_134;
  const Scalar det4_1235_2345 = rhs[A12]*det3_235_345 - rhs[A13]*det3_235_245 
                                  + rhs[A14]*det3_235_235 - rhs[A15]*det3_235_234;
  const Scalar det4_1245_0123 = rhs[A10]*det3_245_123 - rhs[A11]*det3_245_023 
                                  + rhs[A12]*det3_245_013 - rhs[A13]*det3_245_012;
  const Scalar det4_1245_0124 = rhs[A10]*det3_245_124 - rhs[A11]*det3_245_024 
                                  + rhs[A12]*det3_245_014 - rhs[A14]*det3_245_012;
  const Scalar det4_1245_0125 = rhs[A10]*det3_245_125 - rhs[A11]*det3_245_025 
                                  + rhs[A12]*det3_245_015 - rhs[A15]*det3_245_012;
  const Scalar det4_1245_0134 = rhs[A10]*det3_245_134 - rhs[A11]*det3_245_034 
                                  + rhs[A13]*det3_245_014 - rhs[A14]*det3_245_013;
  const Scalar det4_1245_0135 = rhs[A10]*det3_245_135 - rhs[A11]*det3_245_035 
                                  + rhs[A13]*det3_245_015 - rhs[A15]*det3_245_013;
  const Scalar det4_1245_0145 = rhs[A10]*det3_245_145 - rhs[A11]*det3_245_045 
                                  + rhs[A14]*det3_245_015 - rhs[A15]*det3_245_014;
  const Scalar det4_1245_0234 = rhs[A10]*det3_245_234 - rhs[A12]*det3_245_034 
                                  + rhs[A13]*det3_245_024 - rhs[A14]*det3_245_023;
  const Scalar det4_1245_0235 = rhs[A10]*det3_245_235 - rhs[A12]*det3_245_035 
                                  + rhs[A13]*det3_245_025 - rhs[A15]*det3_245_023;
  const Scalar det4_1245_0245 = rhs[A10]*det3_245_245 - rhs[A12]*det3_245_045 
                                  + rhs[A14]*det3_245_025 - rhs[A15]*det3_245_024;
  const Scalar det4_1245_0345 = rhs[A10]*det3_245_345 - rhs[A13]*det3_245_045 
                                  + rhs[A14]*det3_245_035 - rhs[A15]*det3_245_034;
  const Scalar det4_1245_1234 = rhs[A11]*det3_245_234 - rhs[A12]*det3_245_134 
                                  + rhs[A13]*det3_245_124 - rhs[A14]*det3_245_123;
  const Scalar det4_1245_1235 = rhs[A11]*det3_245_235 - rhs[A12]*det3_245_135 
                                  + rhs[A13]*det3_245_125 - rhs[A15]*det3_245_123;
  const Scalar det4_1245_1245 = rhs[A11]*det3_245_245 - rhs[A12]*det3_245_145 
                                  + rhs[A14]*det3_245_125 - rhs[A15]*det3_245_124;
  const Scalar det4_1245_1345 = rhs[A11]*det3_245_345 - rhs[A13]*det3_245_145 
                                  + rhs[A14]*det3_245_135 - rhs[A15]*det3_245_134;
  const Scalar det4_1245_2345 = rhs[A12]*det3_245_345 - rhs[A13]*det3_245_245 
                                  + rhs[A14]*det3_245_235 - rhs[A15]*det3_245_234;
  const Scalar det4_1345_0123 = rhs[A10]*det3_345_123 - rhs[A11]*det3_345_023 
                                  + rhs[A12]*det3_345_013 - rhs[A13]*det3_345_012;
  const Scalar det4_1345_0124 = rhs[A10]*det3_345_124 - rhs[A11]*det3_345_024 
                                  + rhs[A12]*det3_345_014 - rhs[A14]*det3_345_012;
  const Scalar det4_1345_0125 = rhs[A10]*det3_345_125 - rhs[A11]*det3_345_025 
                                  + rhs[A12]*det3_345_015 - rhs[A15]*det3_345_012;
  const Scalar det4_1345_0134 = rhs[A10]*det3_345_134 - rhs[A11]*det3_345_034 
                                  + rhs[A13]*det3_345_014 - rhs[A14]*det3_345_013;
  const Scalar det4_1345_0135 = rhs[A10]*det3_345_135 - rhs[A11]*det3_345_035 
                                  + rhs[A13]*det3_345_015 - rhs[A15]*det3_345_013;
  const Scalar det4_1345_0145 = rhs[A10]*det3_345_145 - rhs[A11]*det3_345_045 
                                  + rhs[A14]*det3_345_015 - rhs[A15]*det3_345_014;
  const Scalar det4_1345_0234 = rhs[A10]*det3_345_234 - rhs[A12]*det3_345_034 
                                  + rhs[A13]*det3_345_024 - rhs[A14]*det3_345_023;
  const Scalar det4_1345_0235 = rhs[A10]*det3_345_235 - rhs[A12]*det3_345_035 
                                  + rhs[A13]*det3_345_025 - rhs[A15]*det3_345_023;
  const Scalar det4_1345_0245 = rhs[A10]*det3_345_245 - rhs[A12]*det3_345_045 
                                  + rhs[A14]*det3_345_025 - rhs[A15]*det3_345_024;
  const Scalar det4_1345_0345 = rhs[A10]*det3_345_345 - rhs[A13]*det3_345_045 
                                  + rhs[A14]*det3_345_035 - rhs[A15]*det3_345_034;
  const Scalar det4_1345_1234 = rhs[A11]*det3_345_234 - rhs[A12]*det3_345_134 
                                  + rhs[A13]*det3_345_124 - rhs[A14]*det3_345_123;
  const Scalar det4_1345_1235 = rhs[A11]*det3_345_235 - rhs[A12]*det3_345_135 
                                  + rhs[A13]*det3_345_125 - rhs[A15]*det3_345_123;
  const Scalar det4_1345_1245 = rhs[A11]*det3_345_245 - rhs[A12]*det3_345_145 
                                  + rhs[A14]*det3_345_125 - rhs[A15]*det3_345_124;
  const Scalar det4_1345_1345 = rhs[A11]*det3_345_345 - rhs[A13]*det3_345_145 
                                  + rhs[A14]*det3_345_135 - rhs[A15]*det3_345_134;
  const Scalar det4_1345_2345 = rhs[A12]*det3_345_345 - rhs[A13]*det3_345_245 
                                  + rhs[A14]*det3_345_235 - rhs[A15]*det3_345_234;
  const Scalar det4_2345_0123 = rhs[A20]*det3_345_123 - rhs[A21]*det3_345_023 
                                  + rhs[A22]*det3_345_013 - rhs[A23]*det3_345_012;
  const Scalar det4_2345_0124 = rhs[A20]*det3_345_124 - rhs[A21]*det3_345_024 
                                  + rhs[A22]*det3_345_014 - rhs[A24]*det3_345_012;
  const Scalar det4_2345_0125 = rhs[A20]*det3_345_125 - rhs[A21]*det3_345_025 
                                  + rhs[A22]*det3_345_015 - rhs[A25]*det3_345_012;
  const Scalar det4_2345_0134 = rhs[A20]*det3_345_134 - rhs[A21]*det3_345_034 
                                  + rhs[A23]*det3_345_014 - rhs[A24]*det3_345_013;
  const Scalar det4_2345_0135 = rhs[A20]*det3_345_135 - rhs[A21]*det3_345_035 
                                  + rhs[A23]*det3_345_015 - rhs[A25]*det3_345_013;
  const Scalar det4_2345_0145 = rhs[A20]*det3_345_145 - rhs[A21]*det3_345_045 
                                  + rhs[A24]*det3_345_015 - rhs[A25]*det3_345_014;
  const Scalar det4_2345_0234 = rhs[A20]*det3_345_234 - rhs[A22]*det3_345_034 
                                  + rhs[A23]*det3_345_024 - rhs[A24]*det3_345_023;
  const Scalar det4_2345_0235 = rhs[A20]*det3_345_235 - rhs[A22]*det3_345_035 
                                  + rhs[A23]*det3_345_025 - rhs[A25]*det3_345_023;
  const Scalar det4_2345_0245 = rhs[A20]*det3_345_245 - rhs[A22]*det3_345_045 
                                  + rhs[A24]*det3_345_025 - rhs[A25]*det3_345_024;
  const Scalar det4_2345_0345 = rhs[A20]*det3_345_345 - rhs[A23]*det3_345_045 
                                  + rhs[A24]*det3_345_035 - rhs[A25]*det3_345_034;
  const Scalar det4_2345_1234 = rhs[A21]*det3_345_234 - rhs[A22]*det3_345_134 
                                  + rhs[A23]*det3_345_124 - rhs[A24]*det3_345_123;
  const Scalar det4_2345_1235 = rhs[A21]*det3_345_235 - rhs[A22]*det3_345_135 
                                  + rhs[A23]*det3_345_125 - rhs[A25]*det3_345_123;
  const Scalar det4_2345_1245 = rhs[A21]*det3_345_245 - rhs[A22]*det3_345_145 
                                  + rhs[A24]*det3_345_125 - rhs[A25]*det3_345_124;
  const Scalar det4_2345_1345 = rhs[A21]*det3_345_345 - rhs[A23]*det3_345_145 
                                  + rhs[A24]*det3_345_135 - rhs[A25]*det3_345_134;
  const Scalar det4_2345_2345 = rhs[A22]*det3_345_345 - rhs[A23]*det3_345_245 
                                  + rhs[A24]*det3_345_235 - rhs[A25]*det3_345_234;

  // Find all NECESSARY 5x5 dets:  (36 of them)

  const Scalar det5_01234_01234 = rhs[A00]*det4_1234_1234 - rhs[A01]*det4_1234_0234 
                                    + rhs[A02]*det4_1234_0134 - rhs[A03]*det4_1234_0124 + rhs[A04]*det4_1234_0123;
  const Scalar det5_01234_01235 = rhs[A00]*det4_1234_1235 - rhs[A01]*det4_1234_0235
                                    + rhs[A02]*det4_1234_0135 - rhs[A03]*det4_1234_0125 + rhs[A05]*det4_1234_0123;
  const Scalar det5_01234_01245 = rhs[A00]*det4_1234_1245 - rhs[A01]*det4_1234_0245
                                    + rhs[A02]*det4_1234_0145 - rhs[A04]*det4_1234_0125 + rhs[A05]*det4_1234_0124;
  const Scalar det5_01234_01345 = rhs[A00]*det4_1234_1345 - rhs[A01]*det4_1234_0345
                                    + rhs[A03]*det4_1234_0145 - rhs[A04]*det4_1234_0135 + rhs[A05]*det4_1234_0134;
  const Scalar det5_01234_02345 = rhs[A00]*det4_1234_2345 - rhs[A02]*det4_1234_0345
                                    + rhs[A03]*det4_1234_0245 - rhs[A04]*det4_1234_0235 + rhs[A05]*det4_1234_0234;
  const Scalar det5_01234_12345 = rhs[A01]*det4_1234_2345 - rhs[A02]*det4_1234_1345
                                    + rhs[A03]*det4_1234_1245 - rhs[A04]*det4_1234_1235 + rhs[A05]*det4_1234_1234;
  const Scalar det5_01235_01234 = rhs[A00]*det4_1235_1234 - rhs[A01]*det4_1235_0234 
                                    + rhs[A02]*det4_1235_0134 - rhs[A03]*det4_1235_0124 + rhs[A04]*det4_1235_0123;
  const Scalar det5_01235_01235 = rhs[A00]*det4_1235_1235 - rhs[A01]*det4_1235_0235 
                                    + rhs[A02]*det4_1235_0135 - rhs[A03]*det4_1235_0125 + rhs[A05]*det4_1235_0123;
  const Scalar det5_01235_01245 = rhs[A00]*det4_1235_1245 - rhs[A01]*det4_1235_0245 
                                    + rhs[A02]*det4_1235_0145 - rhs[A04]*det4_1235_0125 + rhs[A05]*det4_1235_0124;
  const Scalar det5_01235_01345 = rhs[A00]*det4_1235_1345 - rhs[A01]*det4_1235_0345 
                                    + rhs[A03]*det4_1235_0145 - rhs[A04]*det4_1235_0135 + rhs[A05]*det4_1235_0134;
  const Scalar det5_01235_02345 = rhs[A00]*det4_1235_2345 - rhs[A02]*det4_1235_0345 
                                    + rhs[A03]*det4_1235_0245 - rhs[A04]*det4_1235_0235 + rhs[A05]*det4_1235_0234;
  const Scalar det5_01235_12345 = rhs[A01]*det4_1235_2345 - rhs[A02]*det4_1235_1345 
                                    + rhs[A03]*det4_1235_1245 - rhs[A04]*det4_1235_1235 + rhs[A05]*det4_1235_1234;
  const Scalar det5_01245_01234 = rhs[A00]*det4_1245_1234 - rhs[A01]*det4_1245_0234 
                                    + rhs[A02]*det4_1245_0134 - rhs[A03]*det4_1245_0124 + rhs[A04]*det4_1245_0123;
  const Scalar det5_01245_01235 = rhs[A00]*det4_1245_1235 - rhs[A01]*det4_1245_0235 
                                    + rhs[A02]*det4_1245_0135 - rhs[A03]*det4_1245_0125 + rhs[A05]*det4_1245_0123;
  const Scalar det5_01245_01245 = rhs[A00]*det4_1245_1245 - rhs[A01]*det4_1245_0245 
                                    + rhs[A02]*det4_1245_0145 - rhs[A04]*det4_1245_0125 + rhs[A05]*det4_1245_0124;
  const Scalar det5_01245_01345 = rhs[A00]*det4_1245_1345 - rhs[A01]*det4_1245_0345 
                                    + rhs[A03]*det4_1245_0145 - rhs[A04]*det4_1245_0135 + rhs[A05]*det4_1245_0134;
  const Scalar det5_01245_02345 = rhs[A00]*det4_1245_2345 - rhs[A02]*det4_1245_0345 
                                    + rhs[A03]*det4_1245_0245 - rhs[A04]*det4_1245_0235 + rhs[A05]*det4_1245_0234;
  const Scalar det5_01245_12345 = rhs[A01]*det4_1245_2345 - rhs[A02]*det4_1245_1345 
                                    + rhs[A03]*det4_1245_1245 - rhs[A04]*det4_1245_1235 + rhs[A05]*det4_1245_1234;
  const Scalar det5_01345_01234 = rhs[A00]*det4_1345_1234 - rhs[A01]*det4_1345_0234 
                                    + rhs[A02]*det4_1345_0134 - rhs[A03]*det4_1345_0124 + rhs[A04]*det4_1345_0123;
  const Scalar det5_01345_01235 = rhs[A00]*det4_1345_1235 - rhs[A01]*det4_1345_0235 
                                    + rhs[A02]*det4_1345_0135 - rhs[A03]*det4_1345_0125 + rhs[A05]*det4_1345_0123;
  const Scalar det5_01345_01245 = rhs[A00]*det4_1345_1245 - rhs[A01]*det4_1345_0245 
                                    + rhs[A02]*det4_1345_0145 - rhs[A04]*det4_1345_0125 + rhs[A05]*det4_1345_0124;
  const Scalar det5_01345_01345 = rhs[A00]*det4_1345_1345 - rhs[A01]*det4_1345_0345 
                                    + rhs[A03]*det4_1345_0145 - rhs[A04]*det4_1345_0135 + rhs[A05]*det4_1345_0134;
  const Scalar det5_01345_02345 = rhs[A00]*det4_1345_2345 - rhs[A02]*det4_1345_0345 
                                    + rhs[A03]*det4_1345_0245 - rhs[A04]*det4_1345_0235 + rhs[A05]*det4_1345_0234;
  const Scalar det5_01345_12345 = rhs[A01]*det4_1345_2345 - rhs[A02]*det4_1345_1345 
                                    + rhs[A03]*det4_1345_1245 - rhs[A04]*det4_1345_1235 + rhs[A05]*det4_1345_1234;
  const Scalar det5_02345_01234 = rhs[A00]*det4_2345_1234 - rhs[A01]*det4_2345_0234 
                                    + rhs[A02]*det4_2345_0134 - rhs[A03]*det4_2345_0124 + rhs[A04]*det4_2345_0123;
  const Scalar det5_02345_01235 = rhs[A00]*det4_2345_1235 - rhs[A01]*det4_2345_0235 
                                    + rhs[A02]*det4_2345_0135 - rhs[A03]*det4_2345_0125 + rhs[A05]*det4_2345_0123;
  const Scalar det5_02345_01245 = rhs[A00]*det4_2345_1245 - rhs[A01]*det4_2345_0245 
                                    + rhs[A02]*det4_2345_0145 - rhs[A04]*det4_2345_0125 + rhs[A05]*det4_2345_0124;
  const Scalar det5_02345_01345 = rhs[A00]*det4_2345_1345 - rhs[A01]*det4_2345_0345 
                                    + rhs[A03]*det4_2345_0145 - rhs[A04]*det4_2345_0135 + rhs[A05]*det4_2345_0134;
  const Scalar det5_02345_02345 = rhs[A00]*det4_2345_2345 - rhs[A02]*det4_2345_0345 
                                    + rhs[A03]*det4_2345_0245 - rhs[A04]*det4_2345_0235 + rhs[A05]*det4_2345_0234;
  const Scalar det5_02345_12345 = rhs[A01]*det4_2345_2345 - rhs[A02]*det4_2345_1345 
                                    + rhs[A03]*det4_2345_1245 - rhs[A04]*det4_2345_1235 + rhs[A05]*det4_2345_1234;
  const Scalar det5_12345_01234 = rhs[A10]*det4_2345_1234 - rhs[A11]*det4_2345_0234 
                                    + rhs[A12]*det4_2345_0134 - rhs[A13]*det4_2345_0124 + rhs[A14]*det4_2345_0123;
  const Scalar det5_12345_01235 = rhs[A10]*det4_2345_1235 - rhs[A11]*det4_2345_0235 
                                    + rhs[A12]*det4_2345_0135 - rhs[A13]*det4_2345_0125 + rhs[A15]*det4_2345_0123;
  const Scalar det5_12345_01245 = rhs[A10]*det4_2345_1245 - rhs[A11]*det4_2345_0245 
                                    + rhs[A12]*det4_2345_0145 - rhs[A14]*det4_2345_0125 + rhs[A15]*det4_2345_0124;
  const Scalar det5_12345_01345 = rhs[A10]*det4_2345_1345 - rhs[A11]*det4_2345_0345 
                                    + rhs[A13]*det4_2345_0145 - rhs[A14]*det4_2345_0135 + rhs[A15]*det4_2345_0134;
  const Scalar det5_12345_02345 = rhs[A10]*det4_2345_2345 - rhs[A12]*det4_2345_0345 
                                    + rhs[A13]*det4_2345_0245 - rhs[A14]*det4_2345_0235 + rhs[A15]*det4_2345_0234;
  const Scalar det5_12345_12345 = rhs[A11]*det4_2345_2345 - rhs[A12]*det4_2345_1345 
                                    + rhs[A13]*det4_2345_1245 - rhs[A14]*det4_2345_1235 + rhs[A15]*det4_2345_1234;

  // Find the determinant 

  const Scalar det = rhs[A00]*det5_12345_12345 - rhs[A01]*det5_12345_02345 + rhs[A02]*det5_12345_01345 
                       - rhs[A03]*det5_12345_01245 + rhs[A04]*det5_12345_01235 - rhs[A05]*det5_12345_01234;


  if ( det == 0 ) {
    //    Error("Inv6x6","matrix is singular");
    //m.Invalidate();
    return false;
  }

  const Scalar oneOverDet = 1.0/det;
  const Scalar mn1OverDet = - oneOverDet;

  rhs[A00] =  det5_12345_12345*oneOverDet;
  rhs[A01] =  det5_02345_12345*mn1OverDet;
  rhs[A02] =  det5_01345_12345*oneOverDet;
  rhs[A03] =  det5_01245_12345*mn1OverDet;
  rhs[A04] =  det5_01235_12345*oneOverDet;
  rhs[A05] =  det5_01234_12345*mn1OverDet;

  rhs[A10] =  det5_12345_02345*mn1OverDet;
  rhs[A11] =  det5_02345_02345*oneOverDet;
  rhs[A12] =  det5_01345_02345*mn1OverDet;
  rhs[A13] =  det5_01245_02345*oneOverDet;
  rhs[A14] =  det5_01235_02345*mn1OverDet;
  rhs[A15] =  det5_01234_02345*oneOverDet;

  rhs[A20] =  det5_12345_01345*oneOverDet;
  rhs[A21] =  det5_02345_01345*mn1OverDet;
  rhs[A22] =  det5_01345_01345*oneOverDet;
  rhs[A23] =  det5_01245_01345*mn1OverDet;
  rhs[A24] =  det5_01235_01345*oneOverDet;
  rhs[A25] =  det5_01234_01345*mn1OverDet;

  rhs[A30] =  det5_12345_01245*mn1OverDet;
  rhs[A31] =  det5_02345_01245*oneOverDet;
  rhs[A32] =  det5_01345_01245*mn1OverDet;
  rhs[A33] =  det5_01245_01245*oneOverDet;
  rhs[A34] =  det5_01235_01245*mn1OverDet;
  rhs[A35] =  det5_01234_01245*oneOverDet;

  rhs[A40] =  det5_12345_01235*oneOverDet;
  rhs[A41] =  det5_02345_01235*mn1OverDet;
  rhs[A42] =  det5_01345_01235*oneOverDet;
  rhs[A43] =  det5_01245_01235*mn1OverDet;
  rhs[A44] =  det5_01235_01235*oneOverDet;
  rhs[A45] =  det5_01234_01235*mn1OverDet;

  rhs[A50] =  det5_12345_01234*mn1OverDet;
  rhs[A51] =  det5_02345_01234*oneOverDet;
  rhs[A52] =  det5_01345_01234*mn1OverDet;
  rhs[A53] =  det5_01245_01234*oneOverDet;
  rhs[A54] =  det5_01235_01234*mn1OverDet;
  rhs[A55] =  det5_01234_01234*oneOverDet;

  return true;
}

  }  // namespace Math

}  // namespace ROOT
          



// undef macros to avoid conflicts
#undef F00 
#undef F01 
#undef F02
#undef F03

#undef F10
#undef F11
#undef F12
#undef F13

#undef F20
#undef F21
#undef F22
#undef F23

#undef F30
#undef F31
#undef F32
#undef F33

// undef 
#undef M00
#undef M01
#undef M02
#undef M03
#undef M04

#undef M10
#undef M11
#undef M12
#undef M13
#undef M14

#undef M20
#undef M21
#undef M22
#undef M23
#undef M24

#undef M30
#undef M31
#undef M32
#undef M33
#undef M34

#undef M40
#undef M41
#undef M42
#undef M43
#undef M44

#undef A00
#undef A01
#undef A02
#undef A03
#undef A04
#undef A05

#undef A10
#undef A11
#undef A12
#undef A13
#undef A14
#undef A15

#undef A20
#undef A21
#undef A22
#undef A23
#undef A24
#undef A25

#undef A30
#undef A31
#undef A32
#undef A33
#undef A34
#undef A35

#undef A40
#undef A41
#undef A42
#undef A43
#undef A44
#undef A45

#undef A50
#undef A51
#undef A52
#undef A53
#undef A54
#undef A55

#endif
